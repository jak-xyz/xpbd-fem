#include "Fem.h"
#include "Xpbd.h"

//-----------------------------------------------------------------------------
// Precalculated FEM values at quadrature points for 1-3 point quadrature
template<typename Vec, uint32_t Points> constexpr uint32_t QuadratureWeights = 0;
template<> constexpr float QuadratureWeights<vec2, 1>[1] = { 4.000000f, };
template<> constexpr float QuadratureWeights<vec2, 4>[4] = { 1.000000f, 1.000000f, 1.000000f, 1.000000f, };
template<> constexpr float QuadratureWeights<vec2, 9>[9] = { 0.308642f, 0.493828f, 0.308642f, 0.493828f, 0.790124f, 0.493828f, 0.308642f, 0.493828f, 0.308642f, };
template<> constexpr float QuadratureWeights<vec3, 1>[1] = { 8.000000f, };
template<> constexpr float QuadratureWeights<vec3, 8>[8] = { 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, };
template<> constexpr float QuadratureWeights<vec3, 27>[27] = { 0.171468f, 0.274349f, 0.171468f, 0.274349f, 0.438958f, 0.274349f, 0.171468f, 0.274349f, 0.171468f, 0.274349f, 0.438958f, 0.274349f, 0.438958f, 0.702332f, 0.438958f, 0.274349f, 0.438958f, 0.274349f, 0.171468f, 0.274349f, 0.171468f, 0.274349f, 0.438958f, 0.274349f, 0.171468f, 0.274349f, 0.171468f, };

template<typename Vec, uint32_t Nodes, uint32_t Points> constexpr uint32_t ShapeFunctions = 0;
template<> constexpr float ShapeFunctions<vec2, 4, 1>[1][4] = { { 0.250000f, 0.250000f, 0.250000f, 0.250000f, }, };
template<> constexpr float ShapeFunctions<vec2, 4, 4>[4][4] = { { 0.622008f, 0.166667f, 0.044658f, 0.166667f, }, { 0.166667f, 0.622008f, 0.166667f, 0.044658f, }, { 0.166667f, 0.044658f, 0.166667f, 0.622008f, }, { 0.044658f, 0.166667f, 0.622008f, 0.166667f, }, };
template<> constexpr float ShapeFunctions<vec2, 4, 9>[9][4] = { { 0.787299f, 0.100000f, 0.012702f, 0.100000f, }, { 0.443649f, 0.443649f, 0.056351f, 0.056351f, }, { 0.100000f, 0.787299f, 0.100000f, 0.012702f, }, { 0.443649f, 0.056351f, 0.056351f, 0.443649f, }, { 0.250000f, 0.250000f, 0.250000f, 0.250000f, }, { 0.056351f, 0.443649f, 0.443649f, 0.056351f, }, { 0.100000f, 0.012702f, 0.100000f, 0.787299f, }, { 0.056351f, 0.056351f, 0.443649f, 0.443649f, }, { 0.012702f, 0.100000f, 0.787299f, 0.100000f, }, };
template<> constexpr float ShapeFunctions<vec2, 9, 1>[1][9] = { { 0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 1.000000f, }, };
template<> constexpr float ShapeFunctions<vec2, 9, 4>[4][9] = { { 0.207336f, -0.055556f, 0.014886f, -0.055556f, 0.303561f, -0.081339f, -0.081339f, 0.303561f, 0.444445f, }, { -0.055556f, 0.207336f, -0.055556f, 0.014886f, 0.303561f, 0.303561f, -0.081339f, -0.081339f, 0.444445f, }, { -0.055556f, 0.014886f, -0.055556f, 0.207336f, -0.081339f, -0.081339f, 0.303561f, 0.303561f, 0.444445f, }, { 0.014886f, -0.055556f, 0.207336f, -0.055556f, -0.081339f, 0.303561f, 0.303561f, -0.081339f, 0.444445f, }, };
template<> constexpr float ShapeFunctions<vec2, 9, 9>[9][9] = { { 0.472380f, -0.060000f, 0.007621f, -0.060000f, 0.274919f, -0.034919f, -0.034919f, 0.274919f, 0.160000f, }, { -0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.687299f, 0.000000f, -0.087298f, -0.000000f, 0.399999f, }, { -0.060000f, 0.472380f, -0.060000f, 0.007621f, 0.274919f, 0.274919f, -0.034919f, -0.034919f, 0.160000f, }, { -0.000000f, 0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.087298f, 0.000000f, 0.687299f, 0.399999f, }, { 0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 1.000000f, }, { 0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.687299f, 0.000000f, -0.087298f, 0.399999f, }, { -0.060000f, 0.007621f, -0.060000f, 0.472380f, -0.034919f, -0.034919f, 0.274919f, 0.274919f, 0.160000f, }, { 0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.087298f, 0.000000f, 0.687299f, -0.000000f, 0.399999f, }, { 0.007621f, -0.060000f, 0.472380f, -0.060000f, -0.034919f, 0.274919f, 0.274919f, -0.034919f, 0.160000f, }, };
template<> constexpr float ShapeFunctions<vec3, 8, 1>[1][8] = {
	{ 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, }, };
template<> constexpr float ShapeFunctions<vec3, 8, 8>[8][8] = {
	{ 0.490562f, 0.131446f, 0.131446f, 0.035221f, 0.131446f, 0.035221f, 0.035221f, 0.009437f, }, { 0.131446f, 0.490562f, 0.035221f, 0.131446f, 0.035221f, 0.131446f, 0.009437f, 0.035221f, },
	{ 0.131446f, 0.035221f, 0.490562f, 0.131446f, 0.035221f, 0.009437f, 0.131446f, 0.035221f, }, { 0.035221f, 0.131446f, 0.131446f, 0.490562f, 0.009437f, 0.035221f, 0.035221f, 0.131446f, },
	{ 0.131446f, 0.035221f, 0.035221f, 0.009437f, 0.490562f, 0.131446f, 0.131446f, 0.035221f, }, { 0.035221f, 0.131446f, 0.009437f, 0.035221f, 0.131446f, 0.490562f, 0.035221f, 0.131446f, },
	{ 0.035221f, 0.009437f, 0.131446f, 0.035221f, 0.131446f, 0.035221f, 0.490562f, 0.131446f, }, { 0.009437f, 0.035221f, 0.035221f, 0.131446f, 0.035221f, 0.131446f, 0.131446f, 0.490562f, }, };
template<> constexpr float ShapeFunctions<vec3, 8, 27>[27][8] = {
	{ 0.698569f, 0.088730f, 0.088730f, 0.011270f, 0.088730f, 0.011270f, 0.011270f, 0.001431f, }, { 0.393649f, 0.393649f, 0.050000f, 0.050000f, 0.050000f, 0.050000f, 0.006351f, 0.006351f, }, { 0.088730f, 0.698569f, 0.011270f, 0.088730f, 0.011270f, 0.088730f, 0.001431f, 0.011270f, },
	{ 0.393649f, 0.050000f, 0.393649f, 0.050000f, 0.050000f, 0.006351f, 0.050000f, 0.006351f, }, { 0.221825f, 0.221825f, 0.221825f, 0.221825f, 0.028175f, 0.028175f, 0.028175f, 0.028175f, }, { 0.050000f, 0.393649f, 0.050000f, 0.393649f, 0.006351f, 0.050000f, 0.006351f, 0.050000f, },
	{ 0.088730f, 0.011270f, 0.698569f, 0.088730f, 0.011270f, 0.001431f, 0.088730f, 0.011270f, }, { 0.050000f, 0.050000f, 0.393649f, 0.393649f, 0.006351f, 0.006351f, 0.050000f, 0.050000f, }, { 0.011270f, 0.088730f, 0.088730f, 0.698569f, 0.001431f, 0.011270f, 0.011270f, 0.088730f, },
	{ 0.393649f, 0.050000f, 0.050000f, 0.006351f, 0.393649f, 0.050000f, 0.050000f, 0.006351f, }, { 0.221825f, 0.221825f, 0.028175f, 0.028175f, 0.221825f, 0.221825f, 0.028175f, 0.028175f, }, { 0.050000f, 0.393649f, 0.006351f, 0.050000f, 0.050000f, 0.393649f, 0.006351f, 0.050000f, },
	{ 0.221825f, 0.028175f, 0.221825f, 0.028175f, 0.221825f, 0.028175f, 0.221825f, 0.028175f, }, { 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, 0.125000f, }, { 0.028175f, 0.221825f, 0.028175f, 0.221825f, 0.028175f, 0.221825f, 0.028175f, 0.221825f, },
	{ 0.050000f, 0.006351f, 0.393649f, 0.050000f, 0.050000f, 0.006351f, 0.393649f, 0.050000f, }, { 0.028175f, 0.028175f, 0.221825f, 0.221825f, 0.028175f, 0.028175f, 0.221825f, 0.221825f, }, { 0.006351f, 0.050000f, 0.050000f, 0.393649f, 0.006351f, 0.050000f, 0.050000f, 0.393649f, },
	{ 0.088730f, 0.011270f, 0.011270f, 0.001431f, 0.698569f, 0.088730f, 0.088730f, 0.011270f, }, { 0.050000f, 0.050000f, 0.006351f, 0.006351f, 0.393649f, 0.393649f, 0.050000f, 0.050000f, }, { 0.011270f, 0.088730f, 0.001431f, 0.011270f, 0.088730f, 0.698569f, 0.011270f, 0.088730f, },
	{ 0.050000f, 0.006351f, 0.050000f, 0.006351f, 0.393649f, 0.050000f, 0.393649f, 0.050000f, }, { 0.028175f, 0.028175f, 0.028175f, 0.028175f, 0.221825f, 0.221825f, 0.221825f, 0.221825f, }, { 0.006351f, 0.050000f, 0.006351f, 0.050000f, 0.050000f, 0.393649f, 0.050000f, 0.393649f, },
	{ 0.011270f, 0.001431f, 0.088730f, 0.011270f, 0.088730f, 0.011270f, 0.698569f, 0.088730f, }, { 0.006351f, 0.006351f, 0.050000f, 0.050000f, 0.050000f, 0.050000f, 0.393649f, 0.393649f, }, { 0.001431f, 0.011270f, 0.011270f, 0.088730f, 0.011270f, 0.088730f, 0.088730f, 0.698569f, }, };
template<> constexpr float ShapeFunctions<vec3, 27, 1>[1][27] = {
	{ -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 1.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, }, };
template<> constexpr float ShapeFunctions<vec3, 27, 8>[8][27] = {
	{ 0.094409f, 0.138224f, -0.025297f, 0.138224f, 0.202374f, -0.037037f, -0.025297f, -0.037037f, 0.006778f, 0.138224f, 0.202374f, -0.037037f, 0.202374f, 0.296297f, -0.054226f, -0.037037f, -0.054226f, 0.009924f, -0.025297f, -0.037037f, 0.006778f, -0.037037f, -0.054226f, 0.009924f, 0.006778f, 0.009924f, -0.001816f, }, { -0.025297f, 0.138224f, 0.094409f, -0.037037f, 0.202374f, 0.138224f, 0.006778f, -0.037037f, -0.025297f, -0.037037f, 0.202374f, 0.138224f, -0.054226f, 0.296297f, 0.202374f, 0.009924f, -0.054226f, -0.037037f, 0.006778f, -0.037037f, -0.025297f, 0.009924f, -0.054226f, -0.037037f, -0.001816f, 0.009924f, 0.006778f, },
	{ -0.025297f, -0.037037f, 0.006778f, 0.138224f, 0.202374f, -0.037037f, 0.094409f, 0.138224f, -0.025297f, -0.037037f, -0.054226f, 0.009924f, 0.202374f, 0.296297f, -0.054226f, 0.138224f, 0.202374f, -0.037037f, 0.006778f, 0.009924f, -0.001816f, -0.037037f, -0.054226f, 0.009924f, -0.025297f, -0.037037f, 0.006778f, }, { 0.006778f, -0.037037f, -0.025297f, -0.037037f, 0.202374f, 0.138224f, -0.025297f, 0.138224f, 0.094409f, 0.009924f, -0.054226f, -0.037037f, -0.054226f, 0.296297f, 0.202374f, -0.037037f, 0.202374f, 0.138224f, -0.001816f, 0.009924f, 0.006778f, 0.009924f, -0.054226f, -0.037037f, 0.006778f, -0.037037f, -0.025297f, },
	{ -0.025297f, -0.037037f, 0.006778f, -0.037037f, -0.054226f, 0.009924f, 0.006778f, 0.009924f, -0.001816f, 0.138224f, 0.202374f, -0.037037f, 0.202374f, 0.296297f, -0.054226f, -0.037037f, -0.054226f, 0.009924f, 0.094409f, 0.138224f, -0.025297f, 0.138224f, 0.202374f, -0.037037f, -0.025297f, -0.037037f, 0.006778f, }, { 0.006778f, -0.037037f, -0.025297f, 0.009924f, -0.054226f, -0.037037f, -0.001816f, 0.009924f, 0.006778f, -0.037037f, 0.202374f, 0.138224f, -0.054226f, 0.296297f, 0.202374f, 0.009924f, -0.054226f, -0.037037f, -0.025297f, 0.138224f, 0.094409f, -0.037037f, 0.202374f, 0.138224f, 0.006778f, -0.037037f, -0.025297f, },
	{ 0.006778f, 0.009924f, -0.001816f, -0.037037f, -0.054226f, 0.009924f, -0.025297f, -0.037037f, 0.006778f, -0.037037f, -0.054226f, 0.009924f, 0.202374f, 0.296297f, -0.054226f, 0.138224f, 0.202374f, -0.037037f, -0.025297f, -0.037037f, 0.006778f, 0.138224f, 0.202374f, -0.037037f, 0.094409f, 0.138224f, -0.025297f, }, { -0.001816f, 0.009924f, 0.006778f, 0.009924f, -0.054226f, -0.037037f, 0.006778f, -0.037037f, -0.025297f, 0.009924f, -0.054226f, -0.037037f, -0.054226f, 0.296297f, 0.202374f, -0.037037f, 0.202374f, 0.138224f, 0.006778f, -0.037037f, -0.025297f, -0.037037f, 0.202374f, 0.138224f, -0.025297f, 0.138224f, 0.094409f, }, };
template<> constexpr float ShapeFunctions<vec3, 27, 27>[27][27] = {
	{ 0.324666f, 0.188952f, -0.041238f, 0.188952f, 0.109968f, -0.024000f, -0.041238f, -0.024000f, 0.005238f, 0.188952f, 0.109968f, -0.024000f, 0.109968f, 0.064000f, -0.013968f, -0.024000f, -0.013968f, 0.003048f, -0.041238f, -0.024000f, 0.005238f, -0.024000f, -0.013968f, 0.003048f, 0.005238f, 0.003048f, -0.000665f, }, { -0.000000f, 0.472380f, 0.000000f, -0.000000f, 0.274919f, 0.000000f, 0.000000f, -0.060000f, -0.000000f, -0.000000f, 0.274919f, 0.000000f, -0.000000f, 0.160000f, 0.000000f, 0.000000f, -0.034919f, -0.000000f, 0.000000f, -0.060000f, -0.000000f, 0.000000f, -0.034919f, -0.000000f, -0.000000f, 0.007621f, 0.000000f, }, { -0.041238f, 0.188952f, 0.324666f, -0.024000f, 0.109968f, 0.188952f, 0.005238f, -0.024000f, -0.041238f, -0.024000f, 0.109968f, 0.188952f, -0.013968f, 0.064000f, 0.109968f, 0.003048f, -0.013968f, -0.024000f, 0.005238f, -0.024000f, -0.041238f, 0.003048f, -0.013968f, -0.024000f, -0.000665f, 0.003048f, 0.005238f, },
	{ -0.000000f, -0.000000f, 0.000000f, 0.472380f, 0.274919f, -0.060000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.274919f, 0.160000f, -0.034919f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.060000f, -0.034919f, 0.007621f, -0.000000f, -0.000000f, 0.000000f, }, { 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.687299f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.399999f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.087298f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, }, { 0.000000f, -0.000000f, -0.000000f, -0.060000f, 0.274919f, 0.472380f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.034919f, 0.160000f, 0.274919f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.007621f, -0.034919f, -0.060000f, 0.000000f, -0.000000f, -0.000000f, },
	{ -0.041238f, -0.024000f, 0.005238f, 0.188952f, 0.109968f, -0.024000f, 0.324666f, 0.188952f, -0.041238f, -0.024000f, -0.013968f, 0.003048f, 0.109968f, 0.064000f, -0.013968f, 0.188952f, 0.109968f, -0.024000f, 0.005238f, 0.003048f, -0.000665f, -0.024000f, -0.013968f, 0.003048f, -0.041238f, -0.024000f, 0.005238f, }, { 0.000000f, -0.060000f, -0.000000f, -0.000000f, 0.274919f, 0.000000f, -0.000000f, 0.472380f, 0.000000f, 0.000000f, -0.034919f, -0.000000f, -0.000000f, 0.160000f, 0.000000f, -0.000000f, 0.274919f, 0.000000f, -0.000000f, 0.007621f, 0.000000f, 0.000000f, -0.034919f, -0.000000f, 0.000000f, -0.060000f, -0.000000f, }, { 0.005238f, -0.024000f, -0.041238f, -0.024000f, 0.109968f, 0.188952f, -0.041238f, 0.188952f, 0.324666f, 0.003048f, -0.013968f, -0.024000f, -0.013968f, 0.064000f, 0.109968f, -0.024000f, 0.109968f, 0.188952f, -0.000665f, 0.003048f, 0.005238f, 0.003048f, -0.013968f, -0.024000f, 0.005238f, -0.024000f, -0.041238f, },
	{ -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.472380f, 0.274919f, -0.060000f, 0.274919f, 0.160000f, -0.034919f, -0.060000f, -0.034919f, 0.007621f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, }, { 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.687299f, 0.000000f, -0.000000f, 0.399999f, 0.000000f, 0.000000f, -0.087298f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, }, { 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.060000f, 0.274919f, 0.472380f, -0.034919f, 0.160000f, 0.274919f, 0.007621f, -0.034919f, -0.060000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, },
	{ 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.687299f, 0.399999f, -0.087298f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, }, { -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 1.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, }, { -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.087298f, 0.399999f, 0.687299f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, },
	{ 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.060000f, -0.034919f, 0.007621f, 0.274919f, 0.160000f, -0.034919f, 0.472380f, 0.274919f, -0.060000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, }, { -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.087298f, -0.000000f, -0.000000f, 0.399999f, 0.000000f, -0.000000f, 0.687299f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, }, { -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.007621f, -0.034919f, -0.060000f, -0.034919f, 0.160000f, 0.274919f, -0.060000f, 0.274919f, 0.472380f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, },
	{ -0.041238f, -0.024000f, 0.005238f, -0.024000f, -0.013968f, 0.003048f, 0.005238f, 0.003048f, -0.000665f, 0.188952f, 0.109968f, -0.024000f, 0.109968f, 0.064000f, -0.013968f, -0.024000f, -0.013968f, 0.003048f, 0.324666f, 0.188952f, -0.041238f, 0.188952f, 0.109968f, -0.024000f, -0.041238f, -0.024000f, 0.005238f, }, { 0.000000f, -0.060000f, -0.000000f, 0.000000f, -0.034919f, -0.000000f, -0.000000f, 0.007621f, 0.000000f, -0.000000f, 0.274919f, 0.000000f, -0.000000f, 0.160000f, 0.000000f, 0.000000f, -0.034919f, -0.000000f, -0.000000f, 0.472380f, 0.000000f, -0.000000f, 0.274919f, 0.000000f, 0.000000f, -0.060000f, -0.000000f, }, { 0.005238f, -0.024000f, -0.041238f, 0.003048f, -0.013968f, -0.024000f, -0.000665f, 0.003048f, 0.005238f, -0.024000f, 0.109968f, 0.188952f, -0.013968f, 0.064000f, 0.109968f, 0.003048f, -0.013968f, -0.024000f, -0.041238f, 0.188952f, 0.324666f, -0.024000f, 0.109968f, 0.188952f, 0.005238f, -0.024000f, -0.041238f, },
	{ 0.000000f, 0.000000f, -0.000000f, -0.060000f, -0.034919f, 0.007621f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.274919f, 0.160000f, -0.034919f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.000000f, 0.472380f, 0.274919f, -0.060000f, 0.000000f, 0.000000f, -0.000000f, }, { -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.087298f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.399999f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.000000f, 0.687299f, 0.000000f, -0.000000f, 0.000000f, 0.000000f, }, { -0.000000f, 0.000000f, 0.000000f, 0.007621f, -0.034919f, -0.060000f, 0.000000f, -0.000000f, -0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.034919f, 0.160000f, 0.274919f, -0.000000f, 0.000000f, 0.000000f, 0.000000f, -0.000000f, -0.000000f, -0.060000f, 0.274919f, 0.472380f, -0.000000f, 0.000000f, 0.000000f, },
	{ 0.005238f, 0.003048f, -0.000665f, -0.024000f, -0.013968f, 0.003048f, -0.041238f, -0.024000f, 0.005238f, -0.024000f, -0.013968f, 0.003048f, 0.109968f, 0.064000f, -0.013968f, 0.188952f, 0.109968f, -0.024000f, -0.041238f, -0.024000f, 0.005238f, 0.188952f, 0.109968f, -0.024000f, 0.324666f, 0.188952f, -0.041238f, }, { -0.000000f, 0.007621f, 0.000000f, 0.000000f, -0.034919f, -0.000000f, 0.000000f, -0.060000f, -0.000000f, 0.000000f, -0.034919f, -0.000000f, -0.000000f, 0.160000f, 0.000000f, -0.000000f, 0.274919f, 0.000000f, 0.000000f, -0.060000f, -0.000000f, -0.000000f, 0.274919f, 0.000000f, -0.000000f, 0.472380f, 0.000000f, }, { -0.000665f, 0.003048f, 0.005238f, 0.003048f, -0.013968f, -0.024000f, 0.005238f, -0.024000f, -0.041238f, 0.003048f, -0.013968f, -0.024000f, -0.013968f, 0.064000f, 0.109968f, -0.024000f, 0.109968f, 0.188952f, 0.005238f, -0.024000f, -0.041238f, -0.024000f, 0.109968f, 0.188952f, -0.041238f, 0.188952f, 0.324666f, }, };

template<typename Vec, uint32_t Nodes, uint32_t Points> constexpr uint32_t ShapeFunctionGradients = 0;
template<> constexpr vec2 ShapeFunctionGradients<vec2, 4, 1>[1][4] = { { vec2(-0.250000f,-0.250000f), vec2(0.250000f,-0.250000f), vec2(0.250000f, 0.250000f), vec2(-0.250000f, 0.250000f), }, };
template<> constexpr vec2 ShapeFunctionGradients<vec2, 4, 4>[4][4] = { { vec2(-0.394338f,-0.394338f), vec2(0.394338f,-0.105662f), vec2(0.105662f, 0.105662f), vec2(-0.105662f, 0.394338f), }, { vec2(-0.394338f,-0.105662f), vec2(0.394338f,-0.394338f), vec2(0.105662f, 0.394338f), vec2(-0.105662f, 0.105662f), }, { vec2(-0.105662f,-0.394338f), vec2(0.105662f,-0.105662f), vec2(0.394338f, 0.105662f), vec2(-0.394338f, 0.394338f), }, { vec2(-0.105662f,-0.105662f), vec2(0.105662f,-0.394338f), vec2(0.394338f, 0.394338f), vec2(-0.394338f, 0.105662f), }, };
template<> constexpr vec2 ShapeFunctionGradients<vec2, 4, 9>[9][4] = { { vec2(-0.443649f,-0.443649f), vec2(0.443649f,-0.056351f), vec2(0.056351f, 0.056351f), vec2(-0.056351f, 0.443649f), }, { vec2(-0.443649f,-0.250000f), vec2(0.443649f,-0.250000f), vec2(0.056351f, 0.250000f), vec2(-0.056351f, 0.250000f), }, { vec2(-0.443649f,-0.056351f), vec2(0.443649f,-0.443649f), vec2(0.056351f, 0.443649f), vec2(-0.056351f, 0.056351f), }, { vec2(-0.250000f,-0.443649f), vec2(0.250000f,-0.056351f), vec2(0.250000f, 0.056351f), vec2(-0.250000f, 0.443649f), }, { vec2(-0.250000f,-0.250000f), vec2(0.250000f,-0.250000f), vec2(0.250000f, 0.250000f), vec2(-0.250000f, 0.250000f), }, { vec2(-0.250000f,-0.056351f), vec2(0.250000f,-0.443649f), vec2(0.250000f, 0.443649f), vec2(-0.250000f, 0.056351f), }, { vec2(-0.056351f,-0.443649f), vec2(0.056351f,-0.056351f), vec2(0.443649f, 0.056351f), vec2(-0.443649f, 0.443649f), }, { vec2(-0.056351f,-0.250000f), vec2(0.056351f,-0.250000f), vec2(0.443649f, 0.250000f), vec2(-0.443649f, 0.250000f), }, { vec2(-0.056351f,-0.056351f), vec2(0.056351f,-0.443649f), vec2(0.443649f, 0.443649f), vec2(-0.443649f, 0.056351f), }, };
template<> constexpr vec2 ShapeFunctionGradients<vec2, 9, 1>[1][9] = { { vec2(0.000000f, 0.000000f), vec2(-0.000000f,-0.000000f), vec2(0.000000f, 0.000000f), vec2(-0.000000f,-0.000000f), vec2(0.000000f,-0.500000f), vec2(0.500000f,-0.000000f), vec2(-0.000000f, 0.500000f), vec2(-0.500000f, 0.000000f), vec2(-0.000000f,-0.000000f), }, };
template<> constexpr vec2 ShapeFunctionGradients<vec2, 9, 4>[4][9] = { { vec2(-0.490562f,-0.490562f), vec2(-0.035221f, 0.131446f), vec2(0.009437f, 0.009437f), vec2(0.131446f,-0.035221f), vec2(0.525783f,-0.718234f), vec2(-0.051567f,-0.140883f), vec2(-0.140883f,-0.051567f), vec2(-0.718234f, 0.525783f), vec2(0.769800f, 0.769800f), }, { vec2(0.035221f, 0.131446f), vec2(0.490562f,-0.490562f), vec2(-0.131446f,-0.035221f), vec2(-0.009437f, 0.009437f), vec2(-0.525783f,-0.718234f), vec2(0.718234f, 0.525783f), vec2(0.140883f,-0.051567f), vec2(0.051567f,-0.140883f), vec2(-0.769800f, 0.769800f), }, { vec2(0.131446f, 0.035221f), vec2(0.009437f,-0.009437f), vec2(-0.035221f,-0.131446f), vec2(-0.490562f, 0.490562f), vec2(-0.140883f, 0.051567f), vec2(-0.051567f, 0.140883f), vec2(0.525783f, 0.718234f), vec2(-0.718234f,-0.525783f), vec2(0.769800f,-0.769800f), }, { vec2(-0.009437f,-0.009437f), vec2(-0.131446f, 0.035221f), vec2(0.490562f, 0.490562f), vec2(0.035221f,-0.131446f), vec2(0.140883f, 0.051567f), vec2(0.718234f,-0.525783f), vec2(-0.525783f, 0.718234f), vec2(0.051567f, 0.140883f), vec2(-0.769800f,-0.769800f), }, };
template<> constexpr vec2 ShapeFunctionGradients<vec2, 9, 9>[9][9] = { { vec2(-0.876029f,-0.876029f), vec2(-0.188730f, 0.111270f), vec2(0.023972f, 0.023972f), vec2(0.111270f,-0.188730f), vec2(1.064759f,-0.509838f), vec2(-0.109839f,-0.135242f), vec2(-0.135242f,-0.109839f), vec2(-0.509838f, 1.064759f), vec2(0.619677f, 0.619677f), }, { vec2(-0.343649f, 0.000000f), vec2(0.343649f,-0.000000f), vec2(-0.043649f,-0.000000f), vec2(0.043649f, 0.000000f), vec2(-0.000000f,-1.274597f), vec2(0.200000f, 0.000000f), vec2(0.000000f,-0.274597f), vec2(-0.200000f,-0.000000f), vec2(-0.000000f, 1.549194f), }, { vec2(0.188730f, 0.111270f), vec2(0.876029f,-0.876029f), vec2(-0.111270f,-0.188730f), vec2(-0.023972f, 0.023972f), vec2(-1.064759f,-0.509838f), vec2(0.509838f, 1.064759f), vec2(0.135242f,-0.109839f), vec2(0.109839f,-0.135242f), vec2(-0.619677f, 0.619677f), }, { vec2(0.000000f,-0.343649f), vec2(0.000000f, 0.043649f), vec2(-0.000000f,-0.043649f), vec2(-0.000000f, 0.343649f), vec2(-0.000000f,-0.200000f), vec2(-0.274597f, 0.000000f), vec2(0.000000f, 0.200000f), vec2(-1.274597f,-0.000000f), vec2(1.549194f,-0.000000f), }, { vec2(0.000000f, 0.000000f), vec2(-0.000000f,-0.000000f), vec2(0.000000f, 0.000000f), vec2(-0.000000f,-0.000000f), vec2(0.000000f,-0.500000f), vec2(0.500000f,-0.000000f), vec2(-0.000000f, 0.500000f), vec2(-0.500000f, 0.000000f), vec2(-0.000000f,-0.000000f), }, { vec2(-0.000000f, 0.043649f), vec2(-0.000000f,-0.343649f), vec2(0.000000f, 0.343649f), vec2(0.000000f,-0.043649f), vec2(0.000000f,-0.200000f), vec2(1.274597f,-0.000000f), vec2(-0.000000f, 0.200000f), vec2(0.274597f, 0.000000f), vec2(-1.549194f,-0.000000f), }, { vec2(0.111270f, 0.188730f), vec2(0.023972f,-0.023972f), vec2(-0.188730f,-0.111270f), vec2(-0.876029f, 0.876029f), vec2(-0.135242f, 0.109839f), vec2(-0.109839f, 0.135242f), vec2(1.064759f, 0.509838f), vec2(-0.509838f,-1.064759f), vec2(0.619677f,-0.619677f), }, { vec2(0.043649f,-0.000000f), vec2(-0.043649f, 0.000000f), vec2(0.343649f, 0.000000f), vec2(-0.343649f,-0.000000f), vec2(0.000000f, 0.274597f), vec2(0.200000f,-0.000000f), vec2(-0.000000f, 1.274597f), vec2(-0.200000f, 0.000000f), vec2(-0.000000f,-1.549194f), }, { vec2(-0.023972f,-0.023972f), vec2(-0.111270f, 0.188730f), vec2(0.876029f, 0.876029f), vec2(0.188730f,-0.111270f), vec2(0.135242f, 0.109839f), vec2(0.509838f,-1.064759f), vec2(-1.064759f, 0.509838f), vec2(0.109839f, 0.135242f), vec2(-0.619677f,-0.619677f), }, };
template<> constexpr vec3 ShapeFunctionGradients<vec3, 8, 1>[1][8] = {
	{ vec3(-0.125000f,-0.125000f,-0.125000f), vec3(0.125000f,-0.125000f,-0.125000f), vec3(-0.125000f, 0.125000f,-0.125000f), vec3(0.125000f, 0.125000f,-0.125000f), vec3(-0.125000f,-0.125000f, 0.125000f), vec3(0.125000f,-0.125000f, 0.125000f), vec3(-0.125000f, 0.125000f, 0.125000f), vec3(0.125000f, 0.125000f, 0.125000f), }, };
template<> constexpr vec3 ShapeFunctionGradients<vec3, 8, 8>[8][8] = {
	{ vec3(-0.311004f,-0.311004f,-0.311004f), vec3(0.311004f,-0.083333f,-0.083333f), vec3(-0.083333f, 0.311004f,-0.083333f), vec3(0.083333f, 0.083333f,-0.022329f), vec3(-0.083333f,-0.083333f, 0.311004f), vec3(0.083333f,-0.022329f, 0.083333f), vec3(-0.022329f, 0.083333f, 0.083333f), vec3(0.022329f, 0.022329f, 0.022329f), }, { vec3(-0.311004f,-0.083333f,-0.083333f), vec3(0.311004f,-0.311004f,-0.311004f), vec3(-0.083333f, 0.083333f,-0.022329f), vec3(0.083333f, 0.311004f,-0.083333f), vec3(-0.083333f,-0.022329f, 0.083333f), vec3(0.083333f,-0.083333f, 0.311004f), vec3(-0.022329f, 0.022329f, 0.022329f), vec3(0.022329f, 0.083333f, 0.083333f), },
	{ vec3(-0.083333f,-0.311004f,-0.083333f), vec3(0.083333f,-0.083333f,-0.022329f), vec3(-0.311004f, 0.311004f,-0.311004f), vec3(0.311004f, 0.083333f,-0.083333f), vec3(-0.022329f,-0.083333f, 0.083333f), vec3(0.022329f,-0.022329f, 0.022329f), vec3(-0.083333f, 0.083333f, 0.311004f), vec3(0.083333f, 0.022329f, 0.083333f), }, { vec3(-0.083333f,-0.083333f,-0.022329f), vec3(0.083333f,-0.311004f,-0.083333f), vec3(-0.311004f, 0.083333f,-0.083333f), vec3(0.311004f, 0.311004f,-0.311004f), vec3(-0.022329f,-0.022329f, 0.022329f), vec3(0.022329f,-0.083333f, 0.083333f), vec3(-0.083333f, 0.022329f, 0.083333f), vec3(0.083333f, 0.083333f, 0.311004f), },
	{ vec3(-0.083333f,-0.083333f,-0.311004f), vec3(0.083333f,-0.022329f,-0.083333f), vec3(-0.022329f, 0.083333f,-0.083333f), vec3(0.022329f, 0.022329f,-0.022329f), vec3(-0.311004f,-0.311004f, 0.311004f), vec3(0.311004f,-0.083333f, 0.083333f), vec3(-0.083333f, 0.311004f, 0.083333f), vec3(0.083333f, 0.083333f, 0.022329f), }, { vec3(-0.083333f,-0.022329f,-0.083333f), vec3(0.083333f,-0.083333f,-0.311004f), vec3(-0.022329f, 0.022329f,-0.022329f), vec3(0.022329f, 0.083333f,-0.083333f), vec3(-0.311004f,-0.083333f, 0.083333f), vec3(0.311004f,-0.311004f, 0.311004f), vec3(-0.083333f, 0.083333f, 0.022329f), vec3(0.083333f, 0.311004f, 0.083333f), },
	{ vec3(-0.022329f,-0.083333f,-0.083333f), vec3(0.022329f,-0.022329f,-0.022329f), vec3(-0.083333f, 0.083333f,-0.311004f), vec3(0.083333f, 0.022329f,-0.083333f), vec3(-0.083333f,-0.311004f, 0.083333f), vec3(0.083333f,-0.083333f, 0.022329f), vec3(-0.311004f, 0.311004f, 0.311004f), vec3(0.311004f, 0.083333f, 0.083333f), }, { vec3(-0.022329f,-0.022329f,-0.022329f), vec3(0.022329f,-0.083333f,-0.083333f), vec3(-0.083333f, 0.022329f,-0.083333f), vec3(0.083333f, 0.083333f,-0.311004f), vec3(-0.083333f,-0.083333f, 0.022329f), vec3(0.083333f,-0.311004f, 0.083333f), vec3(-0.311004f, 0.083333f, 0.083333f), vec3(0.311004f, 0.311004f, 0.311004f), }, };
template<> constexpr vec3 ShapeFunctionGradients<vec3, 8, 27>[27][8] = {
	{ vec3(-0.393649f,-0.393649f,-0.393649f), vec3(0.393649f,-0.050000f,-0.050000f), vec3(-0.050000f, 0.393649f,-0.050000f), vec3(0.050000f, 0.050000f,-0.006351f), vec3(-0.050000f,-0.050000f, 0.393649f), vec3(0.050000f,-0.006351f, 0.050000f), vec3(-0.006351f, 0.050000f, 0.050000f), vec3(0.006351f, 0.006351f, 0.006351f), }, { vec3(-0.393649f,-0.221825f,-0.221825f), vec3(0.393649f,-0.221825f,-0.221825f), vec3(-0.050000f, 0.221825f,-0.028175f), vec3(0.050000f, 0.221825f,-0.028175f), vec3(-0.050000f,-0.028175f, 0.221825f), vec3(0.050000f,-0.028175f, 0.221825f), vec3(-0.006351f, 0.028175f, 0.028175f), vec3(0.006351f, 0.028175f, 0.028175f), }, { vec3(-0.393649f,-0.050000f,-0.050000f), vec3(0.393649f,-0.393649f,-0.393649f), vec3(-0.050000f, 0.050000f,-0.006351f), vec3(0.050000f, 0.393649f,-0.050000f), vec3(-0.050000f,-0.006351f, 0.050000f), vec3(0.050000f,-0.050000f, 0.393649f), vec3(-0.006351f, 0.006351f, 0.006351f), vec3(0.006351f, 0.050000f, 0.050000f), },
	{ vec3(-0.221825f,-0.393649f,-0.221825f), vec3(0.221825f,-0.050000f,-0.028175f), vec3(-0.221825f, 0.393649f,-0.221825f), vec3(0.221825f, 0.050000f,-0.028175f), vec3(-0.028175f,-0.050000f, 0.221825f), vec3(0.028175f,-0.006351f, 0.028175f), vec3(-0.028175f, 0.050000f, 0.221825f), vec3(0.028175f, 0.006351f, 0.028175f), }, { vec3(-0.221825f,-0.221825f,-0.125000f), vec3(0.221825f,-0.221825f,-0.125000f), vec3(-0.221825f, 0.221825f,-0.125000f), vec3(0.221825f, 0.221825f,-0.125000f), vec3(-0.028175f,-0.028175f, 0.125000f), vec3(0.028175f,-0.028175f, 0.125000f), vec3(-0.028175f, 0.028175f, 0.125000f), vec3(0.028175f, 0.028175f, 0.125000f), }, { vec3(-0.221825f,-0.050000f,-0.028175f), vec3(0.221825f,-0.393649f,-0.221825f), vec3(-0.221825f, 0.050000f,-0.028175f), vec3(0.221825f, 0.393649f,-0.221825f), vec3(-0.028175f,-0.006351f, 0.028175f), vec3(0.028175f,-0.050000f, 0.221825f), vec3(-0.028175f, 0.006351f, 0.028175f), vec3(0.028175f, 0.050000f, 0.221825f), },
	{ vec3(-0.050000f,-0.393649f,-0.050000f), vec3(0.050000f,-0.050000f,-0.006351f), vec3(-0.393649f, 0.393649f,-0.393649f), vec3(0.393649f, 0.050000f,-0.050000f), vec3(-0.006351f,-0.050000f, 0.050000f), vec3(0.006351f,-0.006351f, 0.006351f), vec3(-0.050000f, 0.050000f, 0.393649f), vec3(0.050000f, 0.006351f, 0.050000f), }, { vec3(-0.050000f,-0.221825f,-0.028175f), vec3(0.050000f,-0.221825f,-0.028175f), vec3(-0.393649f, 0.221825f,-0.221825f), vec3(0.393649f, 0.221825f,-0.221825f), vec3(-0.006351f,-0.028175f, 0.028175f), vec3(0.006351f,-0.028175f, 0.028175f), vec3(-0.050000f, 0.028175f, 0.221825f), vec3(0.050000f, 0.028175f, 0.221825f), }, { vec3(-0.050000f,-0.050000f,-0.006351f), vec3(0.050000f,-0.393649f,-0.050000f), vec3(-0.393649f, 0.050000f,-0.050000f), vec3(0.393649f, 0.393649f,-0.393649f), vec3(-0.006351f,-0.006351f, 0.006351f), vec3(0.006351f,-0.050000f, 0.050000f), vec3(-0.050000f, 0.006351f, 0.050000f), vec3(0.050000f, 0.050000f, 0.393649f), },
	{ vec3(-0.221825f,-0.221825f,-0.393649f), vec3(0.221825f,-0.028175f,-0.050000f), vec3(-0.028175f, 0.221825f,-0.050000f), vec3(0.028175f, 0.028175f,-0.006351f), vec3(-0.221825f,-0.221825f, 0.393649f), vec3(0.221825f,-0.028175f, 0.050000f), vec3(-0.028175f, 0.221825f, 0.050000f), vec3(0.028175f, 0.028175f, 0.006351f), }, { vec3(-0.221825f,-0.125000f,-0.221825f), vec3(0.221825f,-0.125000f,-0.221825f), vec3(-0.028175f, 0.125000f,-0.028175f), vec3(0.028175f, 0.125000f,-0.028175f), vec3(-0.221825f,-0.125000f, 0.221825f), vec3(0.221825f,-0.125000f, 0.221825f), vec3(-0.028175f, 0.125000f, 0.028175f), vec3(0.028175f, 0.125000f, 0.028175f), }, { vec3(-0.221825f,-0.028175f,-0.050000f), vec3(0.221825f,-0.221825f,-0.393649f), vec3(-0.028175f, 0.028175f,-0.006351f), vec3(0.028175f, 0.221825f,-0.050000f), vec3(-0.221825f,-0.028175f, 0.050000f), vec3(0.221825f,-0.221825f, 0.393649f), vec3(-0.028175f, 0.028175f, 0.006351f), vec3(0.028175f, 0.221825f, 0.050000f), },
	{ vec3(-0.125000f,-0.221825f,-0.221825f), vec3(0.125000f,-0.028175f,-0.028175f), vec3(-0.125000f, 0.221825f,-0.221825f), vec3(0.125000f, 0.028175f,-0.028175f), vec3(-0.125000f,-0.221825f, 0.221825f), vec3(0.125000f,-0.028175f, 0.028175f), vec3(-0.125000f, 0.221825f, 0.221825f), vec3(0.125000f, 0.028175f, 0.028175f), }, { vec3(-0.125000f,-0.125000f,-0.125000f), vec3(0.125000f,-0.125000f,-0.125000f), vec3(-0.125000f, 0.125000f,-0.125000f), vec3(0.125000f, 0.125000f,-0.125000f), vec3(-0.125000f,-0.125000f, 0.125000f), vec3(0.125000f,-0.125000f, 0.125000f), vec3(-0.125000f, 0.125000f, 0.125000f), vec3(0.125000f, 0.125000f, 0.125000f), }, { vec3(-0.125000f,-0.028175f,-0.028175f), vec3(0.125000f,-0.221825f,-0.221825f), vec3(-0.125000f, 0.028175f,-0.028175f), vec3(0.125000f, 0.221825f,-0.221825f), vec3(-0.125000f,-0.028175f, 0.028175f), vec3(0.125000f,-0.221825f, 0.221825f), vec3(-0.125000f, 0.028175f, 0.028175f), vec3(0.125000f, 0.221825f, 0.221825f), },
	{ vec3(-0.028175f,-0.221825f,-0.050000f), vec3(0.028175f,-0.028175f,-0.006351f), vec3(-0.221825f, 0.221825f,-0.393649f), vec3(0.221825f, 0.028175f,-0.050000f), vec3(-0.028175f,-0.221825f, 0.050000f), vec3(0.028175f,-0.028175f, 0.006351f), vec3(-0.221825f, 0.221825f, 0.393649f), vec3(0.221825f, 0.028175f, 0.050000f), }, { vec3(-0.028175f,-0.125000f,-0.028175f), vec3(0.028175f,-0.125000f,-0.028175f), vec3(-0.221825f, 0.125000f,-0.221825f), vec3(0.221825f, 0.125000f,-0.221825f), vec3(-0.028175f,-0.125000f, 0.028175f), vec3(0.028175f,-0.125000f, 0.028175f), vec3(-0.221825f, 0.125000f, 0.221825f), vec3(0.221825f, 0.125000f, 0.221825f), }, { vec3(-0.028175f,-0.028175f,-0.006351f), vec3(0.028175f,-0.221825f,-0.050000f), vec3(-0.221825f, 0.028175f,-0.050000f), vec3(0.221825f, 0.221825f,-0.393649f), vec3(-0.028175f,-0.028175f, 0.006351f), vec3(0.028175f,-0.221825f, 0.050000f), vec3(-0.221825f, 0.028175f, 0.050000f), vec3(0.221825f, 0.221825f, 0.393649f), },
	{ vec3(-0.050000f,-0.050000f,-0.393649f), vec3(0.050000f,-0.006351f,-0.050000f), vec3(-0.006351f, 0.050000f,-0.050000f), vec3(0.006351f, 0.006351f,-0.006351f), vec3(-0.393649f,-0.393649f, 0.393649f), vec3(0.393649f,-0.050000f, 0.050000f), vec3(-0.050000f, 0.393649f, 0.050000f), vec3(0.050000f, 0.050000f, 0.006351f), }, { vec3(-0.050000f,-0.028175f,-0.221825f), vec3(0.050000f,-0.028175f,-0.221825f), vec3(-0.006351f, 0.028175f,-0.028175f), vec3(0.006351f, 0.028175f,-0.028175f), vec3(-0.393649f,-0.221825f, 0.221825f), vec3(0.393649f,-0.221825f, 0.221825f), vec3(-0.050000f, 0.221825f, 0.028175f), vec3(0.050000f, 0.221825f, 0.028175f), }, { vec3(-0.050000f,-0.006351f,-0.050000f), vec3(0.050000f,-0.050000f,-0.393649f), vec3(-0.006351f, 0.006351f,-0.006351f), vec3(0.006351f, 0.050000f,-0.050000f), vec3(-0.393649f,-0.050000f, 0.050000f), vec3(0.393649f,-0.393649f, 0.393649f), vec3(-0.050000f, 0.050000f, 0.006351f), vec3(0.050000f, 0.393649f, 0.050000f), },
	{ vec3(-0.028175f,-0.050000f,-0.221825f), vec3(0.028175f,-0.006351f,-0.028175f), vec3(-0.028175f, 0.050000f,-0.221825f), vec3(0.028175f, 0.006351f,-0.028175f), vec3(-0.221825f,-0.393649f, 0.221825f), vec3(0.221825f,-0.050000f, 0.028175f), vec3(-0.221825f, 0.393649f, 0.221825f), vec3(0.221825f, 0.050000f, 0.028175f), }, { vec3(-0.028175f,-0.028175f,-0.125000f), vec3(0.028175f,-0.028175f,-0.125000f), vec3(-0.028175f, 0.028175f,-0.125000f), vec3(0.028175f, 0.028175f,-0.125000f), vec3(-0.221825f,-0.221825f, 0.125000f), vec3(0.221825f,-0.221825f, 0.125000f), vec3(-0.221825f, 0.221825f, 0.125000f), vec3(0.221825f, 0.221825f, 0.125000f), }, { vec3(-0.028175f,-0.006351f,-0.028175f), vec3(0.028175f,-0.050000f,-0.221825f), vec3(-0.028175f, 0.006351f,-0.028175f), vec3(0.028175f, 0.050000f,-0.221825f), vec3(-0.221825f,-0.050000f, 0.028175f), vec3(0.221825f,-0.393649f, 0.221825f), vec3(-0.221825f, 0.050000f, 0.028175f), vec3(0.221825f, 0.393649f, 0.221825f), },
	{ vec3(-0.006351f,-0.050000f,-0.050000f), vec3(0.006351f,-0.006351f,-0.006351f), vec3(-0.050000f, 0.050000f,-0.393649f), vec3(0.050000f, 0.006351f,-0.050000f), vec3(-0.050000f,-0.393649f, 0.050000f), vec3(0.050000f,-0.050000f, 0.006351f), vec3(-0.393649f, 0.393649f, 0.393649f), vec3(0.393649f, 0.050000f, 0.050000f), }, { vec3(-0.006351f,-0.028175f,-0.028175f), vec3(0.006351f,-0.028175f,-0.028175f), vec3(-0.050000f, 0.028175f,-0.221825f), vec3(0.050000f, 0.028175f,-0.221825f), vec3(-0.050000f,-0.221825f, 0.028175f), vec3(0.050000f,-0.221825f, 0.028175f), vec3(-0.393649f, 0.221825f, 0.221825f), vec3(0.393649f, 0.221825f, 0.221825f), }, { vec3(-0.006351f,-0.006351f,-0.006351f), vec3(0.006351f,-0.050000f,-0.050000f), vec3(-0.050000f, 0.006351f,-0.050000f), vec3(0.050000f, 0.050000f,-0.393649f), vec3(-0.050000f,-0.050000f, 0.006351f), vec3(0.050000f,-0.393649f, 0.050000f), vec3(-0.393649f, 0.050000f, 0.050000f), vec3(0.393649f, 0.393649f, 0.393649f), }, };
template<> constexpr vec3 ShapeFunctionGradients<vec3, 27, 1>[1][27] = {
	{ vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.500000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.500000f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.500000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.500000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.500000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.500000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), }, };
template<> constexpr vec3 ShapeFunctionGradients<vec3, 27, 8>[8][27] = {
	{ vec3(-0.223373f,-0.223373f,-0.223373f), vec3(0.239411f,-0.327042f,-0.327042f), vec3(-0.016037f, 0.059853f, 0.059853f), vec3(-0.327042f, 0.239411f,-0.327042f), vec3(0.350522f, 0.350522f,-0.478823f), vec3(-0.023480f,-0.064150f, 0.087631f), vec3(0.059853f,-0.016037f, 0.059853f), vec3(-0.064150f,-0.023480f, 0.087631f), vec3(0.004297f, 0.004297f,-0.016038f), vec3(-0.327042f,-0.327042f, 0.239411f), vec3(0.350522f,-0.478823f, 0.350522f), vec3(-0.023480f, 0.087631f,-0.064150f), vec3(-0.478823f, 0.350522f, 0.350522f), vec3(0.513200f, 0.513200f, 0.513200f), vec3(-0.034378f,-0.093922f,-0.093922f), vec3(0.087631f,-0.023480f,-0.064150f), vec3(-0.093922f,-0.034378f,-0.093922f), vec3(0.006292f, 0.006292f, 0.017189f), vec3(0.059853f, 0.059853f,-0.016037f), vec3(-0.064150f, 0.087631f,-0.023480f), vec3(0.004297f,-0.016038f, 0.004297f), vec3(0.087631f,-0.064150f,-0.023480f), vec3(-0.093922f,-0.093922f,-0.034378f), vec3(0.006292f, 0.017189f, 0.006292f), vec3(-0.016038f, 0.004297f, 0.004297f), vec3(0.017189f, 0.006292f, 0.006292f), vec3(-0.001151f,-0.001151f,-0.001151f), }, { vec3(0.016037f, 0.059853f, 0.059853f), vec3(-0.239411f,-0.327042f,-0.327042f), vec3(0.223373f,-0.223373f,-0.223373f), vec3(0.023480f,-0.064150f, 0.087631f), vec3(-0.350522f, 0.350522f,-0.478823f), vec3(0.327042f, 0.239411f,-0.327042f), vec3(-0.004297f, 0.004297f,-0.016038f), vec3(0.064150f,-0.023480f, 0.087631f), vec3(-0.059853f,-0.016037f, 0.059853f), vec3(0.023480f, 0.087631f,-0.064150f), vec3(-0.350522f,-0.478823f, 0.350522f), vec3(0.327042f,-0.327042f, 0.239411f), vec3(0.034378f,-0.093922f,-0.093922f), vec3(-0.513200f, 0.513200f, 0.513200f), vec3(0.478823f, 0.350522f, 0.350522f), vec3(-0.006292f, 0.006292f, 0.017189f), vec3(0.093922f,-0.034378f,-0.093922f), vec3(-0.087631f,-0.023480f,-0.064150f), vec3(-0.004297f,-0.016038f, 0.004297f), vec3(0.064150f, 0.087631f,-0.023480f), vec3(-0.059853f, 0.059853f,-0.016037f), vec3(-0.006292f, 0.017189f, 0.006292f), vec3(0.093922f,-0.093922f,-0.034378f), vec3(-0.087631f,-0.064150f,-0.023480f), vec3(0.001151f,-0.001151f,-0.001151f), vec3(-0.017189f, 0.006292f, 0.006292f), vec3(0.016038f, 0.004297f, 0.004297f), },
	{ vec3(0.059853f, 0.016037f, 0.059853f), vec3(-0.064150f, 0.023480f, 0.087631f), vec3(0.004297f,-0.004297f,-0.016038f), vec3(-0.327042f,-0.239411f,-0.327042f), vec3(0.350522f,-0.350522f,-0.478823f), vec3(-0.023480f, 0.064150f, 0.087631f), vec3(-0.223373f, 0.223373f,-0.223373f), vec3(0.239411f, 0.327042f,-0.327042f), vec3(-0.016037f,-0.059853f, 0.059853f), vec3(0.087631f, 0.023480f,-0.064150f), vec3(-0.093922f, 0.034378f,-0.093922f), vec3(0.006292f,-0.006292f, 0.017189f), vec3(-0.478823f,-0.350522f, 0.350522f), vec3(0.513200f,-0.513200f, 0.513200f), vec3(-0.034378f, 0.093922f,-0.093922f), vec3(-0.327042f, 0.327042f, 0.239411f), vec3(0.350522f, 0.478823f, 0.350522f), vec3(-0.023480f,-0.087631f,-0.064150f), vec3(-0.016038f,-0.004297f, 0.004297f), vec3(0.017189f,-0.006292f, 0.006292f), vec3(-0.001151f, 0.001151f,-0.001151f), vec3(0.087631f, 0.064150f,-0.023480f), vec3(-0.093922f, 0.093922f,-0.034378f), vec3(0.006292f,-0.017189f, 0.006292f), vec3(0.059853f,-0.059853f,-0.016037f), vec3(-0.064150f,-0.087631f,-0.023480f), vec3(0.004297f, 0.016038f, 0.004297f), }, { vec3(-0.004297f,-0.004297f,-0.016038f), vec3(0.064150f, 0.023480f, 0.087631f), vec3(-0.059853f, 0.016037f, 0.059853f), vec3(0.023480f, 0.064150f, 0.087631f), vec3(-0.350522f,-0.350522f,-0.478823f), vec3(0.327042f,-0.239411f,-0.327042f), vec3(0.016037f,-0.059853f, 0.059853f), vec3(-0.239411f, 0.327042f,-0.327042f), vec3(0.223373f, 0.223373f,-0.223373f), vec3(-0.006292f,-0.006292f, 0.017189f), vec3(0.093922f, 0.034378f,-0.093922f), vec3(-0.087631f, 0.023480f,-0.064150f), vec3(0.034378f, 0.093922f,-0.093922f), vec3(-0.513200f,-0.513200f, 0.513200f), vec3(0.478823f,-0.350522f, 0.350522f), vec3(0.023480f,-0.087631f,-0.064150f), vec3(-0.350522f, 0.478823f, 0.350522f), vec3(0.327042f, 0.327042f, 0.239411f), vec3(0.001151f, 0.001151f,-0.001151f), vec3(-0.017189f,-0.006292f, 0.006292f), vec3(0.016038f,-0.004297f, 0.004297f), vec3(-0.006292f,-0.017189f, 0.006292f), vec3(0.093922f, 0.093922f,-0.034378f), vec3(-0.087631f, 0.064150f,-0.023480f), vec3(-0.004297f, 0.016038f, 0.004297f), vec3(0.064150f,-0.087631f,-0.023480f), vec3(-0.059853f,-0.059853f,-0.016037f), },
	{ vec3(0.059853f, 0.059853f, 0.016037f), vec3(-0.064150f, 0.087631f, 0.023480f), vec3(0.004297f,-0.016038f,-0.004297f), vec3(0.087631f,-0.064150f, 0.023480f), vec3(-0.093922f,-0.093922f, 0.034378f), vec3(0.006292f, 0.017189f,-0.006292f), vec3(-0.016038f, 0.004297f,-0.004297f), vec3(0.017189f, 0.006292f,-0.006292f), vec3(-0.001151f,-0.001151f, 0.001151f), vec3(-0.327042f,-0.327042f,-0.239411f), vec3(0.350522f,-0.478823f,-0.350522f), vec3(-0.023480f, 0.087631f, 0.064150f), vec3(-0.478823f, 0.350522f,-0.350522f), vec3(0.513200f, 0.513200f,-0.513200f), vec3(-0.034378f,-0.093922f, 0.093922f), vec3(0.087631f,-0.023480f, 0.064150f), vec3(-0.093922f,-0.034378f, 0.093922f), vec3(0.006292f, 0.006292f,-0.017189f), vec3(-0.223373f,-0.223373f, 0.223373f), vec3(0.239411f,-0.327042f, 0.327042f), vec3(-0.016037f, 0.059853f,-0.059853f), vec3(-0.327042f, 0.239411f, 0.327042f), vec3(0.350522f, 0.350522f, 0.478823f), vec3(-0.023480f,-0.064150f,-0.087631f), vec3(0.059853f,-0.016037f,-0.059853f), vec3(-0.064150f,-0.023480f,-0.087631f), vec3(0.004297f, 0.004297f, 0.016038f), }, { vec3(-0.004297f,-0.016038f,-0.004297f), vec3(0.064150f, 0.087631f, 0.023480f), vec3(-0.059853f, 0.059853f, 0.016037f), vec3(-0.006292f, 0.017189f,-0.006292f), vec3(0.093922f,-0.093922f, 0.034378f), vec3(-0.087631f,-0.064150f, 0.023480f), vec3(0.001151f,-0.001151f, 0.001151f), vec3(-0.017189f, 0.006292f,-0.006292f), vec3(0.016038f, 0.004297f,-0.004297f), vec3(0.023480f, 0.087631f, 0.064150f), vec3(-0.350522f,-0.478823f,-0.350522f), vec3(0.327042f,-0.327042f,-0.239411f), vec3(0.034378f,-0.093922f, 0.093922f), vec3(-0.513200f, 0.513200f,-0.513200f), vec3(0.478823f, 0.350522f,-0.350522f), vec3(-0.006292f, 0.006292f,-0.017189f), vec3(0.093922f,-0.034378f, 0.093922f), vec3(-0.087631f,-0.023480f, 0.064150f), vec3(0.016037f, 0.059853f,-0.059853f), vec3(-0.239411f,-0.327042f, 0.327042f), vec3(0.223373f,-0.223373f, 0.223373f), vec3(0.023480f,-0.064150f,-0.087631f), vec3(-0.350522f, 0.350522f, 0.478823f), vec3(0.327042f, 0.239411f, 0.327042f), vec3(-0.004297f, 0.004297f, 0.016038f), vec3(0.064150f,-0.023480f,-0.087631f), vec3(-0.059853f,-0.016037f,-0.059853f), },
	{ vec3(-0.016038f,-0.004297f,-0.004297f), vec3(0.017189f,-0.006292f,-0.006292f), vec3(-0.001151f, 0.001151f, 0.001151f), vec3(0.087631f, 0.064150f, 0.023480f), vec3(-0.093922f, 0.093922f, 0.034378f), vec3(0.006292f,-0.017189f,-0.006292f), vec3(0.059853f,-0.059853f, 0.016037f), vec3(-0.064150f,-0.087631f, 0.023480f), vec3(0.004297f, 0.016038f,-0.004297f), vec3(0.087631f, 0.023480f, 0.064150f), vec3(-0.093922f, 0.034378f, 0.093922f), vec3(0.006292f,-0.006292f,-0.017189f), vec3(-0.478823f,-0.350522f,-0.350522f), vec3(0.513200f,-0.513200f,-0.513200f), vec3(-0.034378f, 0.093922f, 0.093922f), vec3(-0.327042f, 0.327042f,-0.239411f), vec3(0.350522f, 0.478823f,-0.350522f), vec3(-0.023480f,-0.087631f, 0.064150f), vec3(0.059853f, 0.016037f,-0.059853f), vec3(-0.064150f, 0.023480f,-0.087631f), vec3(0.004297f,-0.004297f, 0.016038f), vec3(-0.327042f,-0.239411f, 0.327042f), vec3(0.350522f,-0.350522f, 0.478823f), vec3(-0.023480f, 0.064150f,-0.087631f), vec3(-0.223373f, 0.223373f, 0.223373f), vec3(0.239411f, 0.327042f, 0.327042f), vec3(-0.016037f,-0.059853f,-0.059853f), }, { vec3(0.001151f, 0.001151f, 0.001151f), vec3(-0.017189f,-0.006292f,-0.006292f), vec3(0.016038f,-0.004297f,-0.004297f), vec3(-0.006292f,-0.017189f,-0.006292f), vec3(0.093922f, 0.093922f, 0.034378f), vec3(-0.087631f, 0.064150f, 0.023480f), vec3(-0.004297f, 0.016038f,-0.004297f), vec3(0.064150f,-0.087631f, 0.023480f), vec3(-0.059853f,-0.059853f, 0.016037f), vec3(-0.006292f,-0.006292f,-0.017189f), vec3(0.093922f, 0.034378f, 0.093922f), vec3(-0.087631f, 0.023480f, 0.064150f), vec3(0.034378f, 0.093922f, 0.093922f), vec3(-0.513200f,-0.513200f,-0.513200f), vec3(0.478823f,-0.350522f,-0.350522f), vec3(0.023480f,-0.087631f, 0.064150f), vec3(-0.350522f, 0.478823f,-0.350522f), vec3(0.327042f, 0.327042f,-0.239411f), vec3(-0.004297f,-0.004297f, 0.016038f), vec3(0.064150f, 0.023480f,-0.087631f), vec3(-0.059853f, 0.016037f,-0.059853f), vec3(0.023480f, 0.064150f,-0.087631f), vec3(-0.350522f,-0.350522f, 0.478823f), vec3(0.327042f,-0.239411f, 0.327042f), vec3(0.016037f,-0.059853f,-0.059853f), vec3(-0.239411f, 0.327042f, 0.327042f), vec3(0.223373f, 0.223373f, 0.223373f), }, };
template<> constexpr vec3 ShapeFunctionGradients<vec3, 27, 27>[27][27] = {
	{ vec3(-0.602094f,-0.602094f,-0.602094f), vec3(0.731808f,-0.350411f,-0.350411f), vec3(-0.129714f, 0.076476f, 0.076476f), vec3(-0.350411f, 0.731808f,-0.350411f), vec3(0.425903f, 0.425903f,-0.203935f), vec3(-0.075492f,-0.092952f, 0.044508f), vec3(0.076476f,-0.129714f, 0.076476f), vec3(-0.092952f,-0.075492f, 0.044508f), vec3(0.016476f, 0.016476f,-0.009714f), vec3(-0.350411f,-0.350411f, 0.731808f), vec3(0.425903f,-0.203935f, 0.425903f), vec3(-0.075492f, 0.044508f,-0.092952f), vec3(-0.203935f, 0.425903f, 0.425903f), vec3(0.247870f, 0.247870f, 0.247870f), vec3(-0.043935f,-0.054097f,-0.054097f), vec3(0.044508f,-0.075492f,-0.092952f), vec3(-0.054097f,-0.043935f,-0.054097f), vec3(0.009589f, 0.009589f, 0.011806f), vec3(0.076476f, 0.076476f,-0.129714f), vec3(-0.092952f, 0.044508f,-0.075492f), vec3(0.016476f,-0.009714f, 0.016476f), vec3(0.044508f,-0.092952f,-0.075492f), vec3(-0.054097f,-0.054097f,-0.043935f), vec3(0.009589f, 0.011806f, 0.009589f), vec3(-0.009714f, 0.016476f, 0.016476f), vec3(0.011806f, 0.009589f, 0.009589f), vec3(-0.002093f,-0.002093f,-0.002093f), }, { vec3(-0.236190f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.876029f,-0.876029f), vec3(0.236190f,-0.000000f,-0.000000f), vec3(-0.137460f,-0.000000f, 0.000000f), vec3(-0.000000f, 1.064759f,-0.509838f), vec3(0.137460f, 0.000000f,-0.000000f), vec3(0.030000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.188730f, 0.111270f), vec3(-0.030000f,-0.000000f, 0.000000f), vec3(-0.137460f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.509838f, 1.064759f), vec3(0.137460f,-0.000000f, 0.000000f), vec3(-0.080000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.619677f, 0.619677f), vec3(0.080000f, 0.000000f, 0.000000f), vec3(0.017460f, 0.000000f, 0.000000f), vec3(0.000000f,-0.109839f,-0.135242f), vec3(-0.017460f,-0.000000f,-0.000000f), vec3(0.030000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.111270f,-0.188730f), vec3(-0.030000f, 0.000000f,-0.000000f), vec3(0.017460f, 0.000000f, 0.000000f), vec3(0.000000f,-0.135242f,-0.109839f), vec3(-0.017460f,-0.000000f,-0.000000f), vec3(-0.003810f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.023972f, 0.023972f), vec3(0.003810f, 0.000000f, 0.000000f), }, { vec3(0.129714f, 0.076476f, 0.076476f), vec3(-0.731808f,-0.350411f,-0.350411f), vec3(0.602094f,-0.602094f,-0.602094f), vec3(0.075492f,-0.092952f, 0.044508f), vec3(-0.425903f, 0.425903f,-0.203935f), vec3(0.350411f, 0.731808f,-0.350411f), vec3(-0.016476f, 0.016476f,-0.009714f), vec3(0.092952f,-0.075492f, 0.044508f), vec3(-0.076476f,-0.129714f, 0.076476f), vec3(0.075492f, 0.044508f,-0.092952f), vec3(-0.425903f,-0.203935f, 0.425903f), vec3(0.350411f,-0.350411f, 0.731808f), vec3(0.043935f,-0.054097f,-0.054097f), vec3(-0.247870f, 0.247870f, 0.247870f), vec3(0.203935f, 0.425903f, 0.425903f), vec3(-0.009589f, 0.009589f, 0.011806f), vec3(0.054097f,-0.043935f,-0.054097f), vec3(-0.044508f,-0.075492f,-0.092952f), vec3(-0.016476f,-0.009714f, 0.016476f), vec3(0.092952f, 0.044508f,-0.075492f), vec3(-0.076476f, 0.076476f,-0.129714f), vec3(-0.009589f, 0.011806f, 0.009589f), vec3(0.054097f,-0.054097f,-0.043935f), vec3(-0.044508f,-0.092952f,-0.075492f), vec3(0.002093f,-0.002093f,-0.002093f), vec3(-0.011806f, 0.009589f, 0.009589f), vec3(0.009714f, 0.016476f, 0.016476f), },
	{ vec3(0.000000f,-0.236190f, 0.000000f), vec3(-0.000000f,-0.137460f, 0.000000f), vec3(0.000000f, 0.030000f,-0.000000f), vec3(-0.876029f,-0.000000f,-0.876029f), vec3(1.064759f,-0.000000f,-0.509838f), vec3(-0.188730f, 0.000000f, 0.111270f), vec3(-0.000000f, 0.236190f,-0.000000f), vec3(0.000000f, 0.137460f,-0.000000f), vec3(-0.000000f,-0.030000f, 0.000000f), vec3(0.000000f,-0.137460f,-0.000000f), vec3(-0.000000f,-0.080000f,-0.000000f), vec3(0.000000f, 0.017460f, 0.000000f), vec3(-0.509838f,-0.000000f, 1.064759f), vec3(0.619677f,-0.000000f, 0.619677f), vec3(-0.109839f, 0.000000f,-0.135242f), vec3(-0.000000f, 0.137460f, 0.000000f), vec3(0.000000f, 0.080000f, 0.000000f), vec3(-0.000000f,-0.017460f,-0.000000f), vec3(-0.000000f, 0.030000f, 0.000000f), vec3(0.000000f, 0.017460f, 0.000000f), vec3(-0.000000f,-0.003810f,-0.000000f), vec3(0.111270f, 0.000000f,-0.188730f), vec3(-0.135242f, 0.000000f,-0.109839f), vec3(0.023972f,-0.000000f, 0.023972f), vec3(0.000000f,-0.030000f,-0.000000f), vec3(-0.000000f,-0.017460f,-0.000000f), vec3(0.000000f, 0.003810f, 0.000000f), }, { vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.343649f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.343649f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-1.274597f), vec3(0.343649f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.343649f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.200000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.200000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 1.549194f), vec3(0.200000f,-0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.200000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.043649f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.043649f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.274597f), vec3(-0.043649f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.043649f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), }, { vec3(-0.000000f, 0.030000f,-0.000000f), vec3(0.000000f,-0.137460f, 0.000000f), vec3(-0.000000f,-0.236190f, 0.000000f), vec3(0.188730f, 0.000000f, 0.111270f), vec3(-1.064759f,-0.000000f,-0.509838f), vec3(0.876029f,-0.000000f,-0.876029f), vec3(0.000000f,-0.030000f, 0.000000f), vec3(-0.000000f, 0.137460f,-0.000000f), vec3(0.000000f, 0.236190f,-0.000000f), vec3(-0.000000f, 0.017460f, 0.000000f), vec3(0.000000f,-0.080000f,-0.000000f), vec3(-0.000000f,-0.137460f,-0.000000f), vec3(0.109839f, 0.000000f,-0.135242f), vec3(-0.619677f,-0.000000f, 0.619677f), vec3(0.509838f,-0.000000f, 1.064759f), vec3(0.000000f,-0.017460f,-0.000000f), vec3(-0.000000f, 0.080000f, 0.000000f), vec3(0.000000f, 0.137460f, 0.000000f), vec3(0.000000f,-0.003810f,-0.000000f), vec3(-0.000000f, 0.017460f, 0.000000f), vec3(0.000000f, 0.030000f, 0.000000f), vec3(-0.023972f,-0.000000f, 0.023972f), vec3(0.135242f, 0.000000f,-0.109839f), vec3(-0.111270f, 0.000000f,-0.188730f), vec3(-0.000000f, 0.003810f, 0.000000f), vec3(0.000000f,-0.017460f,-0.000000f), vec3(-0.000000f,-0.030000f,-0.000000f), },
	{ vec3(0.076476f, 0.129714f, 0.076476f), vec3(-0.092952f, 0.075492f, 0.044508f), vec3(0.016476f,-0.016476f,-0.009714f), vec3(-0.350411f,-0.731808f,-0.350411f), vec3(0.425903f,-0.425903f,-0.203935f), vec3(-0.075492f, 0.092952f, 0.044508f), vec3(-0.602094f, 0.602094f,-0.602094f), vec3(0.731808f, 0.350411f,-0.350411f), vec3(-0.129714f,-0.076476f, 0.076476f), vec3(0.044508f, 0.075492f,-0.092952f), vec3(-0.054097f, 0.043935f,-0.054097f), vec3(0.009589f,-0.009589f, 0.011806f), vec3(-0.203935f,-0.425903f, 0.425903f), vec3(0.247870f,-0.247870f, 0.247870f), vec3(-0.043935f, 0.054097f,-0.054097f), vec3(-0.350411f, 0.350411f, 0.731808f), vec3(0.425903f, 0.203935f, 0.425903f), vec3(-0.075492f,-0.044508f,-0.092952f), vec3(-0.009714f,-0.016476f, 0.016476f), vec3(0.011806f,-0.009589f, 0.009589f), vec3(-0.002093f, 0.002093f,-0.002093f), vec3(0.044508f, 0.092952f,-0.075492f), vec3(-0.054097f, 0.054097f,-0.043935f), vec3(0.009589f,-0.011806f, 0.009589f), vec3(0.076476f,-0.076476f,-0.129714f), vec3(-0.092952f,-0.044508f,-0.075492f), vec3(0.016476f, 0.009714f, 0.016476f), }, { vec3(0.030000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.188730f, 0.111270f), vec3(-0.030000f, 0.000000f, 0.000000f), vec3(-0.137460f, 0.000000f, 0.000000f), vec3(-0.000000f,-1.064759f,-0.509838f), vec3(0.137460f,-0.000000f,-0.000000f), vec3(-0.236190f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.876029f,-0.876029f), vec3(0.236190f, 0.000000f,-0.000000f), vec3(0.017460f,-0.000000f, 0.000000f), vec3(0.000000f, 0.109839f,-0.135242f), vec3(-0.017460f, 0.000000f,-0.000000f), vec3(-0.080000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.619677f, 0.619677f), vec3(0.080000f,-0.000000f, 0.000000f), vec3(-0.137460f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.509838f, 1.064759f), vec3(0.137460f, 0.000000f, 0.000000f), vec3(-0.003810f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.023972f, 0.023972f), vec3(0.003810f,-0.000000f, 0.000000f), vec3(0.017460f,-0.000000f, 0.000000f), vec3(0.000000f, 0.135242f,-0.109839f), vec3(-0.017460f, 0.000000f,-0.000000f), vec3(0.030000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.111270f,-0.188730f), vec3(-0.030000f,-0.000000f,-0.000000f), }, { vec3(-0.016476f,-0.016476f,-0.009714f), vec3(0.092952f, 0.075492f, 0.044508f), vec3(-0.076476f, 0.129714f, 0.076476f), vec3(0.075492f, 0.092952f, 0.044508f), vec3(-0.425903f,-0.425903f,-0.203935f), vec3(0.350411f,-0.731808f,-0.350411f), vec3(0.129714f,-0.076476f, 0.076476f), vec3(-0.731808f, 0.350411f,-0.350411f), vec3(0.602094f, 0.602094f,-0.602094f), vec3(-0.009589f,-0.009589f, 0.011806f), vec3(0.054097f, 0.043935f,-0.054097f), vec3(-0.044508f, 0.075492f,-0.092952f), vec3(0.043935f, 0.054097f,-0.054097f), vec3(-0.247870f,-0.247870f, 0.247870f), vec3(0.203935f,-0.425903f, 0.425903f), vec3(0.075492f,-0.044508f,-0.092952f), vec3(-0.425903f, 0.203935f, 0.425903f), vec3(0.350411f, 0.350411f, 0.731808f), vec3(0.002093f, 0.002093f,-0.002093f), vec3(-0.011806f,-0.009589f, 0.009589f), vec3(0.009714f,-0.016476f, 0.016476f), vec3(-0.009589f,-0.011806f, 0.009589f), vec3(0.054097f, 0.054097f,-0.043935f), vec3(-0.044508f, 0.092952f,-0.075492f), vec3(-0.016476f, 0.009714f, 0.016476f), vec3(0.092952f,-0.044508f,-0.075492f), vec3(-0.076476f,-0.076476f,-0.129714f), },
	{ vec3(0.000000f, 0.000000f,-0.236190f), vec3(-0.000000f, 0.000000f,-0.137460f), vec3(0.000000f,-0.000000f, 0.030000f), vec3(0.000000f,-0.000000f,-0.137460f), vec3(-0.000000f,-0.000000f,-0.080000f), vec3(0.000000f, 0.000000f, 0.017460f), vec3(-0.000000f, 0.000000f, 0.030000f), vec3(0.000000f, 0.000000f, 0.017460f), vec3(-0.000000f,-0.000000f,-0.003810f), vec3(-0.876029f,-0.876029f,-0.000000f), vec3(1.064759f,-0.509838f,-0.000000f), vec3(-0.188730f, 0.111270f, 0.000000f), vec3(-0.509838f, 1.064759f,-0.000000f), vec3(0.619677f, 0.619677f,-0.000000f), vec3(-0.109839f,-0.135242f, 0.000000f), vec3(0.111270f,-0.188730f, 0.000000f), vec3(-0.135242f,-0.109839f, 0.000000f), vec3(0.023972f, 0.023972f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.236190f), vec3(0.000000f,-0.000000f, 0.137460f), vec3(-0.000000f, 0.000000f,-0.030000f), vec3(-0.000000f, 0.000000f, 0.137460f), vec3(0.000000f, 0.000000f, 0.080000f), vec3(-0.000000f,-0.000000f,-0.017460f), vec3(0.000000f,-0.000000f,-0.030000f), vec3(-0.000000f,-0.000000f,-0.017460f), vec3(0.000000f, 0.000000f, 0.003810f), }, { vec3(0.000000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.343649f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.200000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.043649f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(-0.343649f, 0.000000f, 0.000000f), vec3(-0.000000f,-1.274597f,-0.000000f), vec3(0.343649f,-0.000000f,-0.000000f), vec3(-0.200000f,-0.000000f, 0.000000f), vec3(-0.000000f, 1.549194f,-0.000000f), vec3(0.200000f, 0.000000f,-0.000000f), vec3(0.043649f, 0.000000f,-0.000000f), vec3(0.000000f,-0.274597f, 0.000000f), vec3(-0.043649f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.343649f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.200000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.043649f), vec3(-0.000000f,-0.000000f,-0.000000f), }, { vec3(-0.000000f,-0.000000f, 0.030000f), vec3(0.000000f, 0.000000f,-0.137460f), vec3(-0.000000f, 0.000000f,-0.236190f), vec3(-0.000000f, 0.000000f, 0.017460f), vec3(0.000000f,-0.000000f,-0.080000f), vec3(-0.000000f,-0.000000f,-0.137460f), vec3(0.000000f,-0.000000f,-0.003810f), vec3(-0.000000f, 0.000000f, 0.017460f), vec3(0.000000f, 0.000000f, 0.030000f), vec3(0.188730f, 0.111270f, 0.000000f), vec3(-1.064759f,-0.509838f,-0.000000f), vec3(0.876029f,-0.876029f,-0.000000f), vec3(0.109839f,-0.135242f, 0.000000f), vec3(-0.619677f, 0.619677f,-0.000000f), vec3(0.509838f, 1.064759f,-0.000000f), vec3(-0.023972f, 0.023972f,-0.000000f), vec3(0.135242f,-0.109839f, 0.000000f), vec3(-0.111270f,-0.188730f, 0.000000f), vec3(0.000000f, 0.000000f,-0.030000f), vec3(-0.000000f,-0.000000f, 0.137460f), vec3(0.000000f,-0.000000f, 0.236190f), vec3(0.000000f,-0.000000f,-0.017460f), vec3(-0.000000f, 0.000000f, 0.080000f), vec3(0.000000f, 0.000000f, 0.137460f), vec3(-0.000000f, 0.000000f, 0.003810f), vec3(0.000000f,-0.000000f,-0.017460f), vec3(-0.000000f,-0.000000f,-0.030000f), },
	{ vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.343649f), vec3(-0.000000f, 0.000000f,-0.200000f), vec3(0.000000f,-0.000000f, 0.043649f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.343649f, 0.000000f), vec3(-0.000000f,-0.200000f, 0.000000f), vec3(0.000000f, 0.043649f,-0.000000f), vec3(-1.274597f,-0.000000f,-0.000000f), vec3(1.549194f,-0.000000f,-0.000000f), vec3(-0.274597f, 0.000000f, 0.000000f), vec3(-0.000000f, 0.343649f,-0.000000f), vec3(0.000000f, 0.200000f,-0.000000f), vec3(-0.000000f,-0.043649f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.343649f), vec3(0.000000f,-0.000000f, 0.200000f), vec3(-0.000000f, 0.000000f,-0.043649f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), }, { vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.500000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.500000f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.500000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.500000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.500000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.500000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), }, { vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.043649f), vec3(0.000000f, 0.000000f,-0.200000f), vec3(-0.000000f, 0.000000f,-0.343649f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.043649f,-0.000000f), vec3(0.000000f,-0.200000f, 0.000000f), vec3(-0.000000f,-0.343649f, 0.000000f), vec3(0.274597f, 0.000000f, 0.000000f), vec3(-1.549194f,-0.000000f,-0.000000f), vec3(1.274597f,-0.000000f,-0.000000f), vec3(0.000000f,-0.043649f, 0.000000f), vec3(-0.000000f, 0.200000f,-0.000000f), vec3(0.000000f, 0.343649f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.043649f), vec3(-0.000000f,-0.000000f, 0.200000f), vec3(0.000000f,-0.000000f, 0.343649f), vec3(0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), },
	{ vec3(-0.000000f,-0.000000f, 0.030000f), vec3(0.000000f,-0.000000f, 0.017460f), vec3(-0.000000f, 0.000000f,-0.003810f), vec3(0.000000f, 0.000000f,-0.137460f), vec3(-0.000000f, 0.000000f,-0.080000f), vec3(0.000000f,-0.000000f, 0.017460f), vec3(0.000000f,-0.000000f,-0.236190f), vec3(-0.000000f,-0.000000f,-0.137460f), vec3(0.000000f, 0.000000f, 0.030000f), vec3(0.111270f, 0.188730f, 0.000000f), vec3(-0.135242f, 0.109839f, 0.000000f), vec3(0.023972f,-0.023972f,-0.000000f), vec3(-0.509838f,-1.064759f,-0.000000f), vec3(0.619677f,-0.619677f,-0.000000f), vec3(-0.109839f, 0.135242f, 0.000000f), vec3(-0.876029f, 0.876029f,-0.000000f), vec3(1.064759f, 0.509838f,-0.000000f), vec3(-0.188730f,-0.111270f, 0.000000f), vec3(0.000000f, 0.000000f,-0.030000f), vec3(-0.000000f, 0.000000f,-0.017460f), vec3(0.000000f,-0.000000f, 0.003810f), vec3(-0.000000f,-0.000000f, 0.137460f), vec3(0.000000f,-0.000000f, 0.080000f), vec3(-0.000000f, 0.000000f,-0.017460f), vec3(-0.000000f, 0.000000f, 0.236190f), vec3(0.000000f, 0.000000f, 0.137460f), vec3(-0.000000f,-0.000000f,-0.030000f), }, { vec3(-0.000000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.043649f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.200000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.000000f,-0.343649f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(0.043649f,-0.000000f,-0.000000f), vec3(0.000000f, 0.274597f, 0.000000f), vec3(-0.043649f, 0.000000f, 0.000000f), vec3(-0.200000f, 0.000000f, 0.000000f), vec3(-0.000000f,-1.549194f,-0.000000f), vec3(0.200000f,-0.000000f,-0.000000f), vec3(-0.343649f,-0.000000f, 0.000000f), vec3(-0.000000f, 1.274597f,-0.000000f), vec3(0.343649f, 0.000000f,-0.000000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.043649f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.200000f), vec3(0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.000000f, 0.343649f), vec3(0.000000f, 0.000000f, 0.000000f), }, { vec3(0.000000f, 0.000000f,-0.003810f), vec3(-0.000000f,-0.000000f, 0.017460f), vec3(0.000000f,-0.000000f, 0.030000f), vec3(-0.000000f,-0.000000f, 0.017460f), vec3(0.000000f, 0.000000f,-0.080000f), vec3(-0.000000f, 0.000000f,-0.137460f), vec3(-0.000000f, 0.000000f, 0.030000f), vec3(0.000000f,-0.000000f,-0.137460f), vec3(-0.000000f,-0.000000f,-0.236190f), vec3(-0.023972f,-0.023972f,-0.000000f), vec3(0.135242f, 0.109839f, 0.000000f), vec3(-0.111270f, 0.188730f, 0.000000f), vec3(0.109839f, 0.135242f, 0.000000f), vec3(-0.619677f,-0.619677f,-0.000000f), vec3(0.509838f,-1.064759f,-0.000000f), vec3(0.188730f,-0.111270f, 0.000000f), vec3(-1.064759f, 0.509838f,-0.000000f), vec3(0.876029f, 0.876029f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.003810f), vec3(0.000000f, 0.000000f,-0.017460f), vec3(-0.000000f, 0.000000f,-0.030000f), vec3(0.000000f, 0.000000f,-0.017460f), vec3(-0.000000f,-0.000000f, 0.080000f), vec3(0.000000f,-0.000000f, 0.137460f), vec3(0.000000f,-0.000000f,-0.030000f), vec3(-0.000000f, 0.000000f, 0.137460f), vec3(0.000000f, 0.000000f, 0.236190f), },
	{ vec3(0.076476f, 0.076476f, 0.129714f), vec3(-0.092952f, 0.044508f, 0.075492f), vec3(0.016476f,-0.009714f,-0.016476f), vec3(0.044508f,-0.092952f, 0.075492f), vec3(-0.054097f,-0.054097f, 0.043935f), vec3(0.009589f, 0.011806f,-0.009589f), vec3(-0.009714f, 0.016476f,-0.016476f), vec3(0.011806f, 0.009589f,-0.009589f), vec3(-0.002093f,-0.002093f, 0.002093f), vec3(-0.350411f,-0.350411f,-0.731808f), vec3(0.425903f,-0.203935f,-0.425903f), vec3(-0.075492f, 0.044508f, 0.092952f), vec3(-0.203935f, 0.425903f,-0.425903f), vec3(0.247870f, 0.247870f,-0.247870f), vec3(-0.043935f,-0.054097f, 0.054097f), vec3(0.044508f,-0.075492f, 0.092952f), vec3(-0.054097f,-0.043935f, 0.054097f), vec3(0.009589f, 0.009589f,-0.011806f), vec3(-0.602094f,-0.602094f, 0.602094f), vec3(0.731808f,-0.350411f, 0.350411f), vec3(-0.129714f, 0.076476f,-0.076476f), vec3(-0.350411f, 0.731808f, 0.350411f), vec3(0.425903f, 0.425903f, 0.203935f), vec3(-0.075492f,-0.092952f,-0.044508f), vec3(0.076476f,-0.129714f,-0.076476f), vec3(-0.092952f,-0.075492f,-0.044508f), vec3(0.016476f, 0.016476f, 0.009714f), }, { vec3(0.030000f,-0.000000f,-0.000000f), vec3(0.000000f, 0.111270f, 0.188730f), vec3(-0.030000f, 0.000000f, 0.000000f), vec3(0.017460f, 0.000000f,-0.000000f), vec3(0.000000f,-0.135242f, 0.109839f), vec3(-0.017460f,-0.000000f, 0.000000f), vec3(-0.003810f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.023972f,-0.023972f), vec3(0.003810f, 0.000000f,-0.000000f), vec3(-0.137460f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.509838f,-1.064759f), vec3(0.137460f,-0.000000f,-0.000000f), vec3(-0.080000f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.619677f,-0.619677f), vec3(0.080000f, 0.000000f,-0.000000f), vec3(0.017460f, 0.000000f,-0.000000f), vec3(0.000000f,-0.109839f, 0.135242f), vec3(-0.017460f,-0.000000f, 0.000000f), vec3(-0.236190f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.876029f, 0.876029f), vec3(0.236190f,-0.000000f, 0.000000f), vec3(-0.137460f,-0.000000f,-0.000000f), vec3(-0.000000f, 1.064759f, 0.509838f), vec3(0.137460f, 0.000000f, 0.000000f), vec3(0.030000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.188730f,-0.111270f), vec3(-0.030000f,-0.000000f,-0.000000f), }, { vec3(-0.016476f,-0.009714f,-0.016476f), vec3(0.092952f, 0.044508f, 0.075492f), vec3(-0.076476f, 0.076476f, 0.129714f), vec3(-0.009589f, 0.011806f,-0.009589f), vec3(0.054097f,-0.054097f, 0.043935f), vec3(-0.044508f,-0.092952f, 0.075492f), vec3(0.002093f,-0.002093f, 0.002093f), vec3(-0.011806f, 0.009589f,-0.009589f), vec3(0.009714f, 0.016476f,-0.016476f), vec3(0.075492f, 0.044508f, 0.092952f), vec3(-0.425903f,-0.203935f,-0.425903f), vec3(0.350411f,-0.350411f,-0.731808f), vec3(0.043935f,-0.054097f, 0.054097f), vec3(-0.247870f, 0.247870f,-0.247870f), vec3(0.203935f, 0.425903f,-0.425903f), vec3(-0.009589f, 0.009589f,-0.011806f), vec3(0.054097f,-0.043935f, 0.054097f), vec3(-0.044508f,-0.075492f, 0.092952f), vec3(0.129714f, 0.076476f,-0.076476f), vec3(-0.731808f,-0.350411f, 0.350411f), vec3(0.602094f,-0.602094f, 0.602094f), vec3(0.075492f,-0.092952f,-0.044508f), vec3(-0.425903f, 0.425903f, 0.203935f), vec3(0.350411f, 0.731808f, 0.350411f), vec3(-0.016476f, 0.016476f, 0.009714f), vec3(0.092952f,-0.075492f,-0.044508f), vec3(-0.076476f,-0.129714f,-0.076476f), },
	{ vec3(-0.000000f, 0.030000f,-0.000000f), vec3(0.000000f, 0.017460f,-0.000000f), vec3(-0.000000f,-0.003810f, 0.000000f), vec3(0.111270f, 0.000000f, 0.188730f), vec3(-0.135242f, 0.000000f, 0.109839f), vec3(0.023972f,-0.000000f,-0.023972f), vec3(0.000000f,-0.030000f, 0.000000f), vec3(-0.000000f,-0.017460f, 0.000000f), vec3(0.000000f, 0.003810f,-0.000000f), vec3(0.000000f,-0.137460f, 0.000000f), vec3(-0.000000f,-0.080000f, 0.000000f), vec3(0.000000f, 0.017460f,-0.000000f), vec3(-0.509838f,-0.000000f,-1.064759f), vec3(0.619677f,-0.000000f,-0.619677f), vec3(-0.109839f, 0.000000f, 0.135242f), vec3(-0.000000f, 0.137460f,-0.000000f), vec3(0.000000f, 0.080000f,-0.000000f), vec3(-0.000000f,-0.017460f, 0.000000f), vec3(0.000000f,-0.236190f,-0.000000f), vec3(-0.000000f,-0.137460f,-0.000000f), vec3(0.000000f, 0.030000f, 0.000000f), vec3(-0.876029f,-0.000000f, 0.876029f), vec3(1.064759f,-0.000000f, 0.509838f), vec3(-0.188730f, 0.000000f,-0.111270f), vec3(-0.000000f, 0.236190f, 0.000000f), vec3(0.000000f, 0.137460f, 0.000000f), vec3(-0.000000f,-0.030000f,-0.000000f), }, { vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.043649f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.043649f,-0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.274597f), vec3(-0.043649f, 0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.043649f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.200000f, 0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.200000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-1.549194f), vec3(0.200000f,-0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.200000f,-0.000000f), vec3(0.000000f, 0.000000f,-0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), vec3(0.000000f,-0.343649f,-0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.343649f, 0.000000f,-0.000000f), vec3(-0.000000f,-0.000000f, 1.274597f), vec3(0.343649f,-0.000000f, 0.000000f), vec3(-0.000000f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.343649f, 0.000000f), vec3(0.000000f, 0.000000f, 0.000000f), }, { vec3(0.000000f,-0.003810f, 0.000000f), vec3(-0.000000f, 0.017460f,-0.000000f), vec3(0.000000f, 0.030000f,-0.000000f), vec3(-0.023972f,-0.000000f,-0.023972f), vec3(0.135242f, 0.000000f, 0.109839f), vec3(-0.111270f, 0.000000f, 0.188730f), vec3(-0.000000f, 0.003810f,-0.000000f), vec3(0.000000f,-0.017460f, 0.000000f), vec3(-0.000000f,-0.030000f, 0.000000f), vec3(-0.000000f, 0.017460f,-0.000000f), vec3(0.000000f,-0.080000f, 0.000000f), vec3(-0.000000f,-0.137460f, 0.000000f), vec3(0.109839f, 0.000000f, 0.135242f), vec3(-0.619677f,-0.000000f,-0.619677f), vec3(0.509838f,-0.000000f,-1.064759f), vec3(0.000000f,-0.017460f, 0.000000f), vec3(-0.000000f, 0.080000f,-0.000000f), vec3(0.000000f, 0.137460f,-0.000000f), vec3(-0.000000f, 0.030000f, 0.000000f), vec3(0.000000f,-0.137460f,-0.000000f), vec3(-0.000000f,-0.236190f,-0.000000f), vec3(0.188730f, 0.000000f,-0.111270f), vec3(-1.064759f,-0.000000f, 0.509838f), vec3(0.876029f,-0.000000f, 0.876029f), vec3(0.000000f,-0.030000f,-0.000000f), vec3(-0.000000f, 0.137460f, 0.000000f), vec3(0.000000f, 0.236190f, 0.000000f), },
	{ vec3(-0.009714f,-0.016476f,-0.016476f), vec3(0.011806f,-0.009589f,-0.009589f), vec3(-0.002093f, 0.002093f, 0.002093f), vec3(0.044508f, 0.092952f, 0.075492f), vec3(-0.054097f, 0.054097f, 0.043935f), vec3(0.009589f,-0.011806f,-0.009589f), vec3(0.076476f,-0.076476f, 0.129714f), vec3(-0.092952f,-0.044508f, 0.075492f), vec3(0.016476f, 0.009714f,-0.016476f), vec3(0.044508f, 0.075492f, 0.092952f), vec3(-0.054097f, 0.043935f, 0.054097f), vec3(0.009589f,-0.009589f,-0.011806f), vec3(-0.203935f,-0.425903f,-0.425903f), vec3(0.247870f,-0.247870f,-0.247870f), vec3(-0.043935f, 0.054097f, 0.054097f), vec3(-0.350411f, 0.350411f,-0.731808f), vec3(0.425903f, 0.203935f,-0.425903f), vec3(-0.075492f,-0.044508f, 0.092952f), vec3(0.076476f, 0.129714f,-0.076476f), vec3(-0.092952f, 0.075492f,-0.044508f), vec3(0.016476f,-0.016476f, 0.009714f), vec3(-0.350411f,-0.731808f, 0.350411f), vec3(0.425903f,-0.425903f, 0.203935f), vec3(-0.075492f, 0.092952f,-0.044508f), vec3(-0.602094f, 0.602094f, 0.602094f), vec3(0.731808f, 0.350411f, 0.350411f), vec3(-0.129714f,-0.076476f,-0.076476f), }, { vec3(-0.003810f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.023972f,-0.023972f), vec3(0.003810f,-0.000000f,-0.000000f), vec3(0.017460f,-0.000000f,-0.000000f), vec3(0.000000f, 0.135242f, 0.109839f), vec3(-0.017460f, 0.000000f, 0.000000f), vec3(0.030000f, 0.000000f,-0.000000f), vec3(0.000000f,-0.111270f, 0.188730f), vec3(-0.030000f,-0.000000f, 0.000000f), vec3(0.017460f,-0.000000f,-0.000000f), vec3(0.000000f, 0.109839f, 0.135242f), vec3(-0.017460f, 0.000000f, 0.000000f), vec3(-0.080000f, 0.000000f, 0.000000f), vec3(-0.000000f,-0.619677f,-0.619677f), vec3(0.080000f,-0.000000f,-0.000000f), vec3(-0.137460f,-0.000000f, 0.000000f), vec3(-0.000000f, 0.509838f,-1.064759f), vec3(0.137460f, 0.000000f,-0.000000f), vec3(0.030000f,-0.000000f, 0.000000f), vec3(0.000000f, 0.188730f,-0.111270f), vec3(-0.030000f, 0.000000f,-0.000000f), vec3(-0.137460f, 0.000000f,-0.000000f), vec3(-0.000000f,-1.064759f, 0.509838f), vec3(0.137460f,-0.000000f, 0.000000f), vec3(-0.236190f,-0.000000f,-0.000000f), vec3(-0.000000f, 0.876029f, 0.876029f), vec3(0.236190f, 0.000000f, 0.000000f), }, { vec3(0.002093f, 0.002093f, 0.002093f), vec3(-0.011806f,-0.009589f,-0.009589f), vec3(0.009714f,-0.016476f,-0.016476f), vec3(-0.009589f,-0.011806f,-0.009589f), vec3(0.054097f, 0.054097f, 0.043935f), vec3(-0.044508f, 0.092952f, 0.075492f), vec3(-0.016476f, 0.009714f,-0.016476f), vec3(0.092952f,-0.044508f, 0.075492f), vec3(-0.076476f,-0.076476f, 0.129714f), vec3(-0.009589f,-0.009589f,-0.011806f), vec3(0.054097f, 0.043935f, 0.054097f), vec3(-0.044508f, 0.075492f, 0.092952f), vec3(0.043935f, 0.054097f, 0.054097f), vec3(-0.247870f,-0.247870f,-0.247870f), vec3(0.203935f,-0.425903f,-0.425903f), vec3(0.075492f,-0.044508f, 0.092952f), vec3(-0.425903f, 0.203935f,-0.425903f), vec3(0.350411f, 0.350411f,-0.731808f), vec3(-0.016476f,-0.016476f, 0.009714f), vec3(0.092952f, 0.075492f,-0.044508f), vec3(-0.076476f, 0.129714f,-0.076476f), vec3(0.075492f, 0.092952f,-0.044508f), vec3(-0.425903f,-0.425903f, 0.203935f), vec3(0.350411f,-0.731808f, 0.350411f), vec3(0.129714f,-0.076476f,-0.076476f), vec3(-0.731808f, 0.350411f, 0.350411f), vec3(0.602094f, 0.602094f, 0.602094f), }, };

//-----------------------------------------------------------------------------
// Helpers for multiplying larger matrices made of arrays of vecs
template<typename Vec, uint32_t N>
inline auto MatMul(const Vec(&vecsAreColumns)[N], const Vec(&vecsAreRows)[N]) {
	using Mat = decltype(outerProduct(Vec(), Vec()));
	Mat result = Mat(0.0f);
	for (uint32_t n = 0; n < N; n++) {
		result += outerProduct(vecsAreColumns[n], vecsAreRows[n]);
	}
	return result;
}

//-----------------------------------------------------------------------------
// Precalculation functions (similar to calculating Qi in linear FEM).
template<uint32_t Points, typename Vec, uint32_t MapNodes>
inline auto GenerateMapJacobian(uint32_t p, const Vec(&P)[MapNodes]) {
	return MatMul(ShapeFunctionGradients<Vec, MapNodes, Points>[p], P);
}

// Coefficient/weight generation for affine-mapped regions
template<typename Vec, uint32_t Nodes, uint32_t Points, uint32_t MapNodes>
inline void GenerateMappedQuadratureCoefficients(QuadratureCoefficients<Vec, Nodes, Points>* d, const Vec(&P)[MapNodes]) {
	for (uint32_t p = 0; p < Points; p++) {
		auto J = GenerateMapJacobian<Points>(p, P);
		float detJ = determinant(J);
		auto Ji = inverse(J);
		d->Ji[p] = Ji;
		d->w[p] = detJ * QuadratureWeights<Vec, Points>[p];
	}
}

// Mass lumping for mapped elements (using the diagonal of the mass matrix)
template<typename Vec, uint32_t Nodes, uint32_t Points, uint32_t MapNodes>
inline void TGenerateMasses(float(&m)[Nodes], float density, const Vec(&P)[MapNodes]) {
	for (uint32_t n = 0; n < Nodes; n++) { m[n] = 0.0f; }
	for (uint32_t p = 0; p < Points; p++) {
		auto J = GenerateMapJacobian<Points>(p, P);
		float detJ = determinant(J);
		float w = density * detJ * QuadratureWeights<Vec, Points>[p];
		for (uint32_t n = 0; n < Nodes; n++) {
			float N = ShapeFunctions<Vec, Nodes, Points>[p][n];
			m[n] += w * N * N;
		}
	}
}

//---------------------------------------------------------
// Different way of numerically integrating the Neo-Hookean term.
// Pre-integrates all the combinations of shape function gradients,
// generally yielding faster runtime and lower memory usage
// (compared to storing the jacobians needed for full quadrature).
template<typename Vec, uint32_t Nodes, uint32_t MapNodes>
inline void GeneratePrefactoredCoefficients(PrefactoredIntegrationCoefficients<Vec, Nodes>* d, const Vec(&P)[MapNodes]) {
	const uint32_t QRNodes = ((Nodes - 1) * (Nodes - 2)) / 2;
	const uint32_t Points = sizeof(Vec) / sizeof(Vec::x) == 2 ? 9 : 27;
	// Calculate integrals of all combinations of mapped shape function gradients
	float one = 0.0f;
	float QQ[(Nodes - 1)] = { 0.0f };
	float QR[QRNodes] = { 0.0f };
	for (uint32_t p = 0; p < Points; p++) {
		const Vec(&dN)[Nodes] = ShapeFunctionGradients<Vec, Nodes, Points>[p];
		auto J = GenerateMapJacobian<Points>(p, P);
		auto Ji = inverse(J);
		float w = determinant(J) * QuadratureWeights<Vec, Points>[p];
		Vec Qi[Nodes - 1];
		for (uint32_t i = 0; i < Nodes - 1; i++) { Qi[i] = Ji * dN[i]; }
		one += w;
		for (uint32_t i = 0; i < Nodes - 1; i++) {
			QQ[i] += w * dot(Qi[i], Qi[i]);
		}
		uint32_t head = 0;
		for (uint32_t i = 0; i < Nodes - 1; i++) {
			for (uint32_t j = i + 1; j < Nodes - 1; j++) {
				QR[head++] += w * dot(Qi[i], Qi[j]);
			}
		}
	}

	// Construct the coefficients from the integrals and offsets
	d->C = -one * dot(Vec(1.0f), Vec(1.0f)); // The last term gets the number of dimensions we're working with
	for (uint32_t i = 0; i < Nodes - 1; i++) {
		d->QQ[i] = QQ[i];
	}
	uint32_t k = 0;
	for (uint32_t i = 0; i < Nodes - 1; i++) {
		for (uint32_t j = i + 1; j < Nodes - 1; j++) {
			d->QR[k] = 2.0f * QR[k];
			++k;
		}
	}
}
// Tri version
inline void GeneratePrefactoredCoefficients(PrefactoredIntegrationCoefficients<vec2, 3>* d, const vec2(&P)[3]) {
	mat2 Q = mat2(P[0] - P[2], P[1] - P[2]);
	float area = 0.5f * (Q[0].x * Q[1].y - Q[0].y * Q[1].x);
	d->C = -area * 2.0f;
	mat2 QiT = transpose(inverse(Q));
	d->QQ[0] = area * dot(QiT[0], QiT[0]);
	d->QQ[1] = area * dot(QiT[1], QiT[1]);
	d->QR[0] = area * 2.0f * dot(QiT[0], QiT[1]);
}

template<typename Vec, uint32_t Nodes>
inline void CalculateIncompressibleNeoHookeanEnergyAndGradients(const PrefactoredIntegrationCoefficients<Vec, Nodes>& d, Vec(&P)[Nodes - 1], float* outU, Vec(&outg)[Nodes]) {
	float& U = *outU;
	Vec(&g)[Nodes] = outg;

	// Apply terms of the polynomial to potential energy and gradients
	U = 0.0f;
	// Apply the i squared terms ...
	for (uint32_t i = 0; i < Nodes - 1; i++) {
		U += d.QQ[i] * dot(P[i], P[i]);
		g[i] = 2.0f * d.QQ[i] * P[i];
	}
	// Apply the i*j off-diagonal terms ...
	uint32_t k = 0;
	for (uint32_t i = 0; i < Nodes - 1; i++) {
		for (uint32_t j = i + 1; j < Nodes - 1; j++) {
			U += d.QR[k] * dot(P[i], P[j]);
			g[i] += d.QR[k] * P[j];
			g[j] += d.QR[k] * P[i];
			++k;
		}
	}
	// Finally apply the offset
	U += d.C;

	// The root node's gradient is the negative sum of all other gradients
	g[Nodes - 1] = Vec(0.0f);
	for (uint32_t i = 0; i < Nodes - 1; i++) {
		g[Nodes - 1] -= g[i];
	}
}

//-----------------------------------------------------------------------------
// Simulation functions

//---------------------------------------------------------
// Sim helpers
inline mat2 adjugate(const mat2& m) {
	return mat2(vec2(m[1][1], -m[0][1]), vec2(-m[1][0], m[0][0]));
};
inline mat3 adjugate(const mat3& m) {
	double m00 = m[0][0], m01 = m[0][1], m02 = m[0][2];
	double m10 = m[1][0], m11 = m[1][1], m12 = m[1][2];
	double m20 = m[2][0], m21 = m[2][1], m22 = m[2][2];

	mat3 adj;
	adj[0][0] = (float)+(m11 * m22 - m12 * m21);
	adj[0][1] = (float)-(m01 * m22 - m02 * m21);
	adj[0][2] = (float)+(m01 * m12 - m02 * m11);
	adj[1][0] = (float)-(m10 * m22 - m12 * m20);
	adj[1][1] = (float)+(m00 * m22 - m02 * m20);
	adj[1][2] = (float)-(m00 * m12 - m02 * m10);
	adj[2][0] = (float)+(m10 * m21 - m11 * m20);
	adj[2][1] = (float)-(m00 * m21 - m01 * m20);
	adj[2][2] = (float)+(m00 * m11 - m01 * m10);
	return adj;
};
inline float determinantFromAdjugate(const mat2& m, const mat2& adj) {
	return m[0][0] * m[1][1] - m[0][1] * m[1][0];
}
inline float determinantFromAdjugate(const mat3& m, const mat3& adj) {
	return dot(m[0], vec3(adj[0][0], adj[1][0], adj[2][0]));
}

inline float TraceXTXMinusDims(const mat2& F) { return dot(F[0], F[0]) + dot(F[1], F[1]) - 2.0f; }
inline float TraceXTXMinusDims(const mat3& F) { return dot(F[0], F[0]) + dot(F[1], F[1]) + dot(F[2], F[2]) - 3.0f; }

template<typename Vec, uint32_t Nodes, uint32_t Points>
inline auto CalculateDeformationGradient(const QuadratureCoefficients<Vec, Nodes, Points>& d, Vec(&P)[Nodes - 1], uint32_t p) {
	// F (deformation gradient) == J^-1 * dN * P^T
	const Vec(&dN)[Nodes] = ShapeFunctionGradients<Vec, Nodes, Points>[p];
	return d.Ji[p] * MatMul((const Vec(&)[Nodes - 1])dN, P);
}
inline mat2 CalculateDeformationGradient(const QuadratureCoefficients<vec2, 3, 1>& d, vec2(&P)[2], uint32_t p) {
	return mat2(P[0], P[1]) * d.Qi[p];
}
inline mat3 CalculateDeformationGradient(const QuadratureCoefficients<vec3, 4, 1>& d, vec3(&P)[3], uint32_t p) {
	return mat3(P[0], P[1], P[2]) * d.Qi[p];
}

template<typename Mat, typename Vec, uint32_t Nodes, uint32_t Points>
inline void ApplyEnergyGradient(const QuadratureCoefficients<Vec, Nodes, Points>& d, Vec(&g)[Nodes], const Mat& G, uint32_t p) {
	const Vec(&dN)[Nodes] = ShapeFunctionGradients<Vec, Nodes, Points>[p];
	Mat Qi = G * d.Ji[p];
	for (uint32_t n = 0; n < Nodes - 1; n++) {
		g[n] += Qi * dN[n];
	}
}
inline void ApplyEnergyGradient(const QuadratureCoefficients<vec2, 3, 1>& d, vec2(&g)[3], const mat2& G, uint32_t p) {
	mat2 g2 = transpose(d.Qi[p] * G);
	for (uint32_t n = 0; n < 2; n++) { g[n] += g2[n]; }
}
inline void ApplyEnergyGradient(const QuadratureCoefficients<vec3, 4, 1>& d, vec3(&g)[4], const mat3& G, uint32_t p) {
	mat3 g3 = transpose(d.Qi[p] * G);
	for (uint32_t n = 0; n < 3; n++) { g[n] += g3[n]; }
}

//---------------------------------------------------------
// Meat of the sim logic in the following 3 functions
enum class PixarOptions { Full, Reduced, Selective };
template<PixarOptions Options, typename Dvec, typename ElementParams, uint32_t Nodes>
inline void SolveElementPixar(float dt, Dvec* X, Dvec* O, float* w, const uint32_t(&is)[Nodes], const ElementParams& ep, const Settings& settings) {
	using Vec = typename Dvec::vec;

	float mu = 2.0f;
	float lambda = mu / (1.0f - 2.0f * settings.poissonsRatio);

	float comp = settings.compliance * ep.volume;
	float damp = settings.damping / ep.volume;
	if constexpr (Nodes == 4 || Nodes == 8) { comp *= 2.0f; }
	if constexpr (sizeof(Vec) == sizeof(vec2)) { comp *= 45.0f; } //@HACK: Just makes the current demo look nicer

	Vec P[Nodes - 1];
	for (uint32_t i = 0; i < Nodes - 1; i++) { P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]); }

	float U = 0.0f;
	Vec g[Nodes];
	for (uint32_t n = 0; n < Nodes; n++) { g[n] = Vec(0.0f); }

	if constexpr (Options == PixarOptions::Full || Options == PixarOptions::Reduced) {
		const auto& d = ([&] { if constexpr (Options == PixarOptions::Full) { return ep.qcHi; } else { return ep.qcLo; } })();
		const uint32_t Points = sizeof(d.w) / sizeof(d.w[0]);

		for (uint32_t p = 0; p < Points; p++) {
			// Strain energy from Pixar's Stable Neo-Hookean Flesh Simulation
			auto F = CalculateDeformationGradient(d, P, p);

			float neoHookeanU = (d.w[p] * (mu / 2.0f)) * TraceXTXMinusDims(F);
			auto neoHookeanG = (d.w[p] * mu) * transpose(F);

			auto adjF = adjugate(F);
			float J = determinantFromAdjugate(F, adjF);
			float a = 1.0f + mu / lambda;
			float Jsuba = J - a;
			float volumetricU = d.w[p] * (lambda / 2.0f) * (Jsuba * Jsuba);
			auto volumetricG = (d.w[p] * lambda * Jsuba) * adjF;

			U += neoHookeanU + volumetricU;
			ApplyEnergyGradient(d, g, neoHookeanG + volumetricG, p);
		}
		for (uint32_t n = 0; n < Nodes - 1; n++) { g[Nodes - 1] -= g[n]; }
	} else {
		const auto& d = ep.qcLo;
		const uint32_t Points = sizeof(d.w) / sizeof(d.w[0]);
		for (uint32_t p = 0; p < Points; p++) {
			auto F = CalculateDeformationGradient(d, P, p);
			auto adjF = adjugate(F);
			float J = determinantFromAdjugate(F, adjF);
			float a = 1.0f + mu / lambda;
			float Jsuba = J - a;
			float volumetricU = d.w[p] * (lambda / 2.0f) * (Jsuba * Jsuba);
			auto volumetricG = (d.w[p] * lambda * Jsuba) * adjF;

			U += volumetricU;
			ApplyEnergyGradient(d, g, volumetricG, p);
		}
		for (uint32_t n = 0; n < Nodes - 1; n++) { g[Nodes - 1] -= g[n]; }

		float UNeoHookean = 0.0f;
		Vec gNeoHookean[Nodes];
		CalculateIncompressibleNeoHookeanEnergyAndGradients(ep.ic, P, &UNeoHookean, gNeoHookean);
		U += UNeoHookean;
		for (uint32_t n = 0; n < Nodes; n++) { g[n] += gNeoHookean[n]; }
	}

	XpbdConstrain(X, O, w, is, U, g, dt, comp, damp, settings.overRelaxation);
}

enum class MixedOptions { Simultaneous, Serial, Subregion, YeohRubber, YeohSkin };
template<MixedOptions Options, typename Dvec, typename ElementParams, uint32_t Nodes>
inline void SolveElementMixed(float dt, Dvec* X, Dvec* O, float* w, const uint32_t(&is)[Nodes], const ElementParams& ep, const Settings& settings) {
	using Vec = typename Dvec::vec;

	float mu = 2.0f;
	float lambda = mu / (1.0f - 2.0f * settings.poissonsRatio);

	const uint32_t Subregions = sizeof(ep.qcLo.w) / sizeof(ep.qcLo.w[0]);
	const uint32_t Constraints = Options != MixedOptions::Simultaneous ? 1 + Subregions : 2;
	float comp[Constraints] = { settings.compliance * ep.volume, 0.0f };
	float damp[Constraints] = { settings.damping / ep.volume, 0.0f };
	if constexpr (Nodes == 4 || Nodes == 8) { comp[0] *= 2.0f; }
	if constexpr (sizeof(Vec) == sizeof(vec2)) { comp[0] *= 45.0f; } //@HACK: Just makes the current demo look nicer
	for (uint32_t c = 1; c < Constraints; c++) {
		comp[c] = 0.005f * comp[0];
		damp[c] = damp[0];
	}

	Vec P[Nodes - 1];
	for (uint32_t i = 0; i < Nodes - 1; i++) { P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]); }

	float U[Constraints] = { 0.0f };
	Vec g[Constraints][Nodes];
	for (uint32_t c = 0; c < Constraints; c++) {
		for (uint32_t n = 0; n < Nodes; n++) { g[c][n] = Vec(0.0f); }
	}

	if constexpr (Options == MixedOptions::Simultaneous) {
		const auto& d = ep.qcHi;
		const uint32_t Points = sizeof(d.w) / sizeof(d.w[0]);
		for (uint32_t p = 0; p < Points; p++) {
			auto F = CalculateDeformationGradient(d, P, p);

			float neoHookeanU = (d.w[p] * (mu / 2.0f)) * TraceXTXMinusDims(F);
			auto neoHookeanG = (d.w[p] * mu) * transpose(F);
			U[0] += neoHookeanU;
			U[0] += d.w[p] * ((lambda / 2.0f) * (mu / lambda) * (mu / lambda)); // Normalizes with the Pixar energy function (at high v, at least)
			ApplyEnergyGradient(d, g[0], neoHookeanG, p);

			auto adjF = adjugate(F);
			float J = determinantFromAdjugate(F, adjF);
			float volumetricU = d.w[p] * (J - 1.0f);
			auto volumetricG = d.w[p] * adjF;
			U[1] += volumetricU;
			ApplyEnergyGradient(d, g[1], volumetricG, p);
		}
		for (uint32_t n = 0; n < Nodes - 1; n++) { g[0][Nodes - 1] -= g[0][n]; g[1][Nodes - 1] -= g[1][n]; }
	} else {
		if constexpr (Options == MixedOptions::Serial || Options == MixedOptions::Subregion) {
			CalculateIncompressibleNeoHookeanEnergyAndGradients(ep.ic, P, &U[0], g[0]);
			U[0] += ep.volume * ((lambda / 2.0f) * (mu / lambda) * (mu / lambda));
			if constexpr (Options == MixedOptions::Serial) {
				XpbdConstrain(X, O, w, is, U[0], g[0], dt, comp[0], damp[0], settings.overRelaxation);
				for (uint32_t i = 0; i < Nodes - 1; i++) { P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]); }
			}
		} else { // if constexpr (Options == MixedOptions::YeohRubber || Options == MixedOptions::YeohSkin) {
			const auto& d = ep.qcHi;
			const uint32_t Points = sizeof(d.w) / sizeof(d.w[0]);
			for (uint32_t p = 0; p < Points; p++) {
				auto F = CalculateDeformationGradient(d, P, p);
				const float CRubber[3] = { 1.1242f, -0.0154f, 0.0064f };
				const float CSkin[3] = { 0.1095f, 14.95f, 4.595f };
				const float(&C)[3] = Options == MixedOptions::YeohRubber ? CRubber : CSkin;
				float I1 = TraceXTXMinusDims(F);
				U[0] += d.w[p] * (C[0] * I1 + C[1] * I1 * I1 + C[2] * I1 * I1 * I1);
				auto G = (d.w[p] * (2.0f * C[0] + 4.0f * C[1] * I1 + 6.0f * C[2] * I1 * I1)) * transpose(F);
				ApplyEnergyGradient(d, g[0], G, p);
			}
			for (uint32_t n = 0; n < Nodes - 1; n++) { g[0][Nodes - 1] -= g[0][n]; }
		}

		if constexpr (false && Nodes == 8) { // Optimization shaves ~7% execution time off the H8 element
			mat3 F;
			F = outerProduct(vec3(-1.0f, -1.0f, -1.0f), P[0]);
			F += outerProduct(vec3(+1.0f, -1.0f, -1.0f), P[1]);
			F += outerProduct(vec3(-1.0f, +1.0f, -1.0f), P[2]);
			F += outerProduct(vec3(+1.0f, +1.0f, -1.0f), P[3]);
			F += outerProduct(vec3(-1.0f, -1.0f, +1.0f), P[4]);
			F += outerProduct(vec3(+1.0f, -1.0f, +1.0f), P[5]);
			F += outerProduct(vec3(-1.0f, +1.0f, +1.0f), P[6]);
			mat3 adjF = adjugate(F);
			float detF = determinantFromAdjugate(F, adjF);
			U[1] = detF - 64.0f * ep.volume;
			g[1][0] = adjF * vec3(-1.0f, -1.0f, -1.0f);
			g[1][1] = adjF * vec3(+1.0f, -1.0f, -1.0f);
			g[1][2] = adjF * vec3(-1.0f, +1.0f, -1.0f);
			g[1][3] = adjF * vec3(+1.0f, +1.0f, -1.0f);
			g[1][4] = adjF * vec3(-1.0f, -1.0f, +1.0f);
			g[1][5] = adjF * vec3(+1.0f, -1.0f, +1.0f);
			g[1][6] = adjF * vec3(-1.0f, +1.0f, +1.0f);
			for (uint32_t n = 0; n < 7; n++) { g[1][7] -= g[1][n]; }

			if constexpr (Options == MixedOptions::Serial) {
				XpbdConstrain(X, O, w, is, U[1], g[1], dt, comp[1], damp[1], settings.overRelaxation);
				for (uint32_t i = 0; i < Nodes - 1; i++) { P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]); }
			}
		} else {
			const auto& d = ep.qcLo;
			const uint32_t Points = sizeof(d.w) / sizeof(d.w[0]);
			for (uint32_t p = 0; p < Points; p++) {
				auto F = CalculateDeformationGradient(d, P, p);
				auto adjF = adjugate(F);
				float J = determinantFromAdjugate(F, adjF);
				float volumetricU = d.w[p] * (J - 1.0f);
				auto volumetricG = d.w[p] * adjF;
				U[1 + p] += volumetricU;
				ApplyEnergyGradient(d, g[1 + p], volumetricG, p);
				for (uint32_t n = 0; n < Nodes - 1; n++) { g[1 + p][Nodes - 1] -= g[1 + p][n]; }

				if constexpr (Options == MixedOptions::Serial) {
					XpbdConstrain(X, O, w, is, U[1 + p], g[1 + p], dt, comp[1 + p], damp[1 + p], settings.overRelaxation);
					for (uint32_t i = 0; i < Nodes - 1; i++) { P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]); }
				}
			}
		}
	}

	if constexpr (Options != MixedOptions::Serial) {
		XpbdConstrainSimultaneous(X, O, w, is, U, g, dt, comp, damp, settings.overRelaxation);
	}
}

template<typename Dvec, typename ElementParams, uint32_t Nodes>
inline void SolveJSubregionsOnly(float dt, Dvec* X, Dvec* O, float* w, const uint32_t(&is)[Nodes], const ElementParams& ep, const Settings& settings) {
	using Vec = typename Dvec::vec;

	const uint32_t Constraints = sizeof(ep.qcLo.w) / sizeof(ep.qcLo.w[0]);
	float comp[Constraints] = { 0.005f * settings.compliance * ep.volume };
	float damp[Constraints] = { 0.0f };
	if constexpr (Nodes == 4 || Nodes == 8) { comp[0] *= 2.0f; }
	if constexpr (sizeof(Vec) == sizeof(vec2)) { comp[0] *= 45.0f; } //@HACK: Just makes the current demo look nicer
	for (uint32_t c = 0; c < Constraints; c++) {
		comp[c] = comp[0];
	}

	Vec P[Nodes - 1];
	for (uint32_t i = 0; i < Nodes - 1; i++) { P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]); }

	float U[Constraints] = { 0.0f };
	Vec g[Constraints][Nodes];
	for (uint32_t c = 0; c < Constraints; c++) {
		for (uint32_t n = 0; n < Nodes; n++) { g[c][n] = Vec(0.0f); }
	}

	for (uint32_t p = 0; p < Constraints; p++) {
		auto F = CalculateDeformationGradient(ep.qcLo, P, p);
		auto adjF = adjugate(F);
		float J = determinantFromAdjugate(F, adjF);
		U[p] = ep.qcLo.w[p] * (J - 1.0f);
		ApplyEnergyGradient(ep.qcLo, g[p], ep.qcLo.w[p] * adjF, p);
		for (uint32_t n = 0; n < Nodes - 1; n++) { g[p][Nodes - 1] -= g[p][n]; }
	}

	XpbdConstrainSimultaneous(X, O, w, is, U, g, dt, comp, damp, settings.overRelaxation);
}

//-----------------------------------------------------------------------------
// Forwarding functions
void GenerateMasses(float(&m)[3], float density, const vec2(&P)[3]) {
	vec2 A = P[0] - P[2], B = P[1] - P[2];
	float area = 0.5f * (A.x * B.y - A.y * B.x);
	m[0] = (1.0f / 3.0f) * density * area;
	m[1] = (1.0f / 3.0f) * density * area;
	m[2] = (1.0f / 3.0f) * density * area;
}
void GenerateMasses(float(&m)[4], float density, const vec2(&P)[4]) { TGenerateMasses<vec2, 4, 4>(m, density, P); }
void GenerateMasses(float(&m)[9], float density, const vec2(&P)[4]) { TGenerateMasses<vec2, 9, 9>(m, density, P); }
void GenerateMasses(float(&m)[8], float density, const vec3(&P)[8]) { TGenerateMasses<vec3, 8, 8>(m, density, P); }
void GenerateMasses(float(&m)[27], float density, const vec3(&P)[8]) { TGenerateMasses<vec3, 27, 27>(m, density, P); }

//-----------------------------------------------------------------------------
// Element params functions
template<typename Vec, uint32_t Nodes, uint32_t MapNodes, class ElementParams>
void TGenerateElementParams(ElementParams* ep, const Vec(&P)[MapNodes]) {
	GenerateMappedQuadratureCoefficients(&ep->qcLo, P);
	GenerateMappedQuadratureCoefficients(&ep->qcHi, P);
	GeneratePrefactoredCoefficients(&ep->ic, P);
	ep->volume = 0.0f;
	for (uint32_t i = 0; i < sizeof(ep->qcLo.w) / sizeof(ep->qcLo.w[0]); i++) {
		ep->volume += ep->qcLo.w[i];
	}
	if constexpr (MapNodes == 4) {
		ep->surfaceArea = distance(P[0], P[1]) + distance(P[2], P[3]) + distance(P[0], P[2]) + distance(P[1], P[3]);
	} else if constexpr (MapNodes == 8) {
		auto FaceArea = [&](uint32_t i0, uint32_t i1, uint32_t i2, uint32_t i3) {
			return 0.5f * length(cross(P[i0] - P[i3], P[i1] - P[i2]));
		};
		ep->surfaceArea =
			FaceArea(0, 1, 2, 3) + FaceArea(4, 5, 6, 7) +
			FaceArea(0, 1, 4, 5) + FaceArea(2, 3, 6, 7) +
			FaceArea(0, 2, 4, 6) + FaceArea(1, 3, 5, 7);
	}
}
void GenerateElementParams(ElementParamsTriangle* ep, const vec2(&P)[3]) {
	mat2 Q = mat2(P[0] - P[2], P[1] - P[2]);
	ep->qcLo.w[0] = 0.5f * (Q[0].x * Q[1].y - Q[0].y * Q[1].x);
	ep->qcLo.Qi[0] = inverse(Q);
	ep->qcHi = ep->qcLo;
	GeneratePrefactoredCoefficients(&ep->ic, P);
	ep->volume = ep->qcLo.w[0];
	ep->surfaceArea = distance(P[0], P[1]) + distance(P[1], P[2]) + distance(P[2], P[0]);
}
void GenerateElementParams(ElementParamsLinear2d* ep, const vec2(&P)[4]) { TGenerateElementParams<vec2, 4>(ep, P); }
void GenerateElementParams(ElementParamsQuadratic2d* ep, const vec2(&P)[4]) { TGenerateElementParams<vec2, 9>(ep, P); }
void GenerateElementParams(ElementParamsLinear3d* ep, const vec3(&P)[8]) { TGenerateElementParams<vec3, 8>(ep, P); }
void GenerateElementParams(ElementParamsQuadratic3d* ep, const vec3(&P)[8]) { TGenerateElementParams<vec3, 27>(ep, P); }

//-----------------------------------------------------------------------------
// Element solve functions
template<typename Dvec, class ElementParams, uint32_t Nodes>
void TSolveElement(float dt, Dvec* X, Dvec* O, float* w, const uint32_t(&is)[Nodes], const ElementParams& ep, const Settings& settings) {
	uint32_t energyFunction = (settings.flags >> Settings_EnergyBit) & Settings_EnergyMask;
	switch (energyFunction) {
	case Energy_Pixar: SolveElementPixar<PixarOptions::Full>(dt, X, O, w, is, ep, settings); break;
	case Energy_PixarReduced: SolveElementPixar<PixarOptions::Reduced>(dt, X, O, w, is, ep, settings); break;
	case Energy_PixarSel: SolveElementPixar<PixarOptions::Selective>(dt, X, O, w, is, ep, settings); break;
	case Energy_Mixed: SolveElementMixed<MixedOptions::Simultaneous>(dt, X, O, w, is, ep, settings); break;
	case Energy_MixedSerial: SolveElementMixed<MixedOptions::Serial>(dt, X, O, w, is, ep, settings); break;
	case Energy_MixedSub: SolveElementMixed<MixedOptions::Subregion>(dt, X, O, w, is, ep, settings); break;
	case Energy_YeohRubber: SolveElementMixed<MixedOptions::YeohRubber>(dt, X, O, w, is, ep, settings); break;
	case Energy_YeohSkin: SolveElementMixed<MixedOptions::YeohSkin>(dt, X, O, w, is, ep, settings); break;
	default:
		SolveElementMixed<MixedOptions::Subregion>(dt, X, O, w, is, ep, settings); break;
		break;
	}
}
void SolveElement(float dt, dvec2* X, dvec2* O, float* w, const uint32_t(&is)[3], const ElementParamsTriangle& ep, const Settings& settings) { TSolveElement(dt, X, O, w, is, ep, settings); }
void SolveElement(float dt, dvec2* X, dvec2* O, float* w, const uint32_t(&is)[4], const ElementParamsLinear2d& ep, const Settings& settings) { TSolveElement(dt, X, O, w, is, ep, settings); }
void SolveElement(float dt, dvec2* X, dvec2* O, float* w, const uint32_t(&is)[9], const ElementParamsQuadratic2d& ep, const Settings& settings) { TSolveElement(dt, X, O, w, is, ep, settings); }
void SolveElement(float dt, dvec3* X, dvec3* O, float* w, const uint32_t(&is)[8], const ElementParamsLinear3d& ep, const Settings& settings) { TSolveElement(dt, X, O, w, is, ep, settings); }
void SolveElement(float dt, dvec3* X, dvec3* O, float* w, const uint32_t(&is)[27], const ElementParamsQuadratic3d& ep, const Settings& settings) { TSolveElement(dt, X, O, w, is, ep, settings); }

void SolveElementVolume(float dt, dvec2* X, dvec2* O, float* w, const uint32_t(&is)[3], const ElementParamsTriangle& ep, const Settings& settings) { SolveJSubregionsOnly(dt, X, O, w, is, ep, settings); }
void SolveElementVolume(float dt, dvec2* X, dvec2* O, float* w, const uint32_t(&is)[4], const ElementParamsLinear2d& ep, const Settings& settings) { SolveJSubregionsOnly(dt, X, O, w, is, ep, settings); }
void SolveElementVolume(float dt, dvec2* X, dvec2* O, float* w, const uint32_t(&is)[9], const ElementParamsQuadratic2d& ep, const Settings& settings) { SolveJSubregionsOnly(dt, X, O, w, is, ep, settings); }
void SolveElementVolume(float dt, dvec3* X, dvec3* O, float* w, const uint32_t(&is)[8], const ElementParamsLinear3d& ep, const Settings& settings) { SolveJSubregionsOnly(dt, X, O, w, is, ep, settings); }
void SolveElementVolume(float dt, dvec3* X, dvec3* O, float* w, const uint32_t(&is)[27], const ElementParamsQuadratic3d& ep, const Settings& settings) { SolveJSubregionsOnly(dt, X, O, w, is, ep, settings); }

//-----------------------------------------------------------------------------
// Volume functions
template<typename Vec, typename Dvec, class ElementParams, uint32_t Nodes>
float TCalculateElementVolume(const Dvec* X, const uint32_t(&is)[Nodes], const ElementParams& ep) {
	Vec P[Nodes - 1];
	for (uint32_t i = 0; i < Nodes - 1; i++) {
		P[i] = Vec(X[is[i]] - X[is[Nodes - 1]]);
	}

	float volume = 0.0f;

	const auto& d = ep.qcHi;
	const uint32_t Points = sizeof(d.w) / sizeof(d.w[0]);
	for (uint32_t p = 0; p < Points; p++) {
		auto F = CalculateDeformationGradient(d, P, p);
		float localVolumeMult = determinant(F);
		volume += d.w[p] * localVolumeMult;
	}

	return volume;
}
float CalculateElementVolume(const dvec2* X, const uint32_t(&is)[4], const ElementParamsLinear2d& ep) { return TCalculateElementVolume<vec2>(X, is, ep); }
float CalculateElementVolume(const dvec2* X, const uint32_t(&is)[9], const ElementParamsQuadratic2d& ep) { return TCalculateElementVolume<vec2>(X, is, ep); }
float CalculateElementVolume(const dvec3* X, const uint32_t(&is)[8], const ElementParamsLinear3d& ep) { return TCalculateElementVolume<vec3>(X, is, ep); }
float CalculateElementVolume(const dvec3* X, const uint32_t(&is)[27], const ElementParamsQuadratic3d& ep) { return TCalculateElementVolume<vec3>(X, is, ep); }
